{"ast":null,"code":"import { isTag } from '../utils.js';\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\n\nconst submittableSelector = 'input,select,textarea,keygen';\nconst r20 = /%20/g;\nconst rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\n\nexport function serialize() {\n  // Convert form elements into name/value objects\n  const arr = this.serializeArray(); // Serialize each element into a key/value string\n\n  const retArr = arr.map(data => `${encodeURIComponent(data.name)}=${encodeURIComponent(data.value)}`); // Return the resulting serialization\n\n  return retArr.join('&').replace(r20, '+');\n}\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\n\nexport function serializeArray() {\n  // Resolve all form elements from either forms or collections of form elements\n  return this.map((_, elem) => {\n    const $elem = this._make(elem);\n\n    if (isTag(elem) && elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n\n    return $elem.filter(submittableSelector).toArray();\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n  '[name!=\"\"]:enabled' + // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  ':not(:submit, :button, :image, :reset, :file)' + // And are either checked/don't have a checkable state\n  ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map((_, elem) => {\n    var _a;\n\n    const $elem = this._make(elem);\n\n    const name = $elem.attr('name'); // We have filtered for elements with a name before.\n    // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n    const value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : ''; // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n    if (Array.isArray(value)) {\n      return value.map(val => (\n      /*\n       * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n       * These can occur inside of `<textarea>'s`\n       */\n      {\n        name,\n        value: val.replace(rCRLF, '\\r\\n')\n      }));\n    } // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n\n\n    return {\n      name,\n      value: value.replace(rCRLF, '\\r\\n')\n    };\n  }).toArray();\n}","map":{"version":3,"sources":["api/forms.ts"],"names":[],"mappings":"AAEA,SAAS,KAAT,QAAsB,aAAtB;AAEA;;;AAGG;;AACH,MAAM,mBAAmB,GAAG,8BAA5B;AACA,MAAM,GAAG,GAAG,MAAZ;AACA,MAAM,KAAK,GAAG,QAAd;AAEA;;;;;;;;;;;;;AAaG;;AACH,OAAM,SAAU,SAAV,GAAmB;AACvB;AACA,QAAM,GAAG,GAAG,KAAK,cAAL,EAAZ,CAFuB,CAIvB;;AACA,QAAM,MAAM,GAAG,GAAG,CAAC,GAAJ,CACZ,IAAD,IACE,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAN,CAAW,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAN,CAAY,EAFvD,CAAf,CALuB,CAUvB;;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,GAAzB,EAA8B,GAA9B,CAAP;AACD;AAOD;;;;;;;;;;;;;AAaG;;AACH,OAAM,SAAU,cAAV,GAAwB;AAG5B;AACA,SAAO,KAAK,GAAL,CAAS,CAAC,CAAD,EAAI,IAAJ,KAAY;AAC1B,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,IAAX,CAAd;;AACA,QAAI,KAAK,CAAC,IAAD,CAAL,IAAe,IAAI,CAAC,IAAL,KAAc,MAAjC,EAAyC;AACvC,aAAO,KAAK,CAAC,IAAN,CAAW,mBAAX,EAAgC,OAAhC,EAAP;AACD;;AACD,WAAO,KAAK,CAAC,MAAN,CAAa,mBAAb,EAAkC,OAAlC,EAAP;AACD,GANM,EAOJ,MAPI,EAQH;AACA,yBACE;AACA,iDAFF,GAGE;AACA,gDAbC,CAcH;AAdG,IAgBJ,GAhBI,CAgB0B,CAAC,CAAD,EAAI,IAAJ,KAAY;;;AACzC,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,IAAX,CAAd;;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,MAAX,CAAb,CAFyC,CAEE;AAC3C;;AACA,UAAM,KAAK,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,GAAN,EAAA,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,EAAX,GAAe,EAA7B,CAJyC,CAMzC;;AACA,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,aAAO,KAAK,CAAC,GAAN,CAAW,GAAD;AACf;;;AAGG;AACF;AAAE,QAAA,IAAF;AAAQ,QAAA,KAAK,EAAE,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,MAAnB;AAAf,OALc,CAAV,CAAP;AAOD,KAfwC,CAgBzC;;;AACA,WAAO;AAAE,MAAA,IAAF;AAAQ,MAAA,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,MAArB;AAAf,KAAP;AACD,GAlCI,EAmCJ,OAnCI,EAAP;AAoCD","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { isTag } from '../utils.js';\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\nconst submittableSelector = 'input,select,textarea,keygen';\nconst r20 = /%20/g;\nconst rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\nexport function serialize() {\n    // Convert form elements into name/value objects\n    const arr = this.serializeArray();\n    // Serialize each element into a key/value string\n    const retArr = arr.map((data) => `${encodeURIComponent(data.name)}=${encodeURIComponent(data.value)}`);\n    // Return the resulting serialization\n    return retArr.join('&').replace(r20, '+');\n}\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\nexport function serializeArray() {\n    // Resolve all form elements from either forms or collections of form elements\n    return this.map((_, elem) => {\n        const $elem = this._make(elem);\n        if (isTag(elem) && elem.name === 'form') {\n            return $elem.find(submittableSelector).toArray();\n        }\n        return $elem.filter(submittableSelector).toArray();\n    })\n        .filter(\n    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n    '[name!=\"\"]:enabled' +\n        // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // And are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    )\n        .map((_, elem) => {\n        var _a;\n        const $elem = this._make(elem);\n        const name = $elem.attr('name'); // We have filtered for elements with a name before.\n        // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n        const value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : '';\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(value)) {\n            return value.map((val) => \n            /*\n             * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n             * These can occur inside of `<textarea>'s`\n             */\n            ({ name, value: val.replace(rCRLF, '\\r\\n') }));\n        }\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        return { name, value: value.replace(rCRLF, '\\r\\n') };\n    })\n        .toArray();\n}\n//# sourceMappingURL=forms.js.map"]},"metadata":{},"sourceType":"module"}