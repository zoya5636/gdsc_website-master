{"ast":null,"code":"import { textContent } from \"./stringify.js\";\nimport { getElementsByTagName } from \"./legacy.js\";\n/**\n * Get the feed object from the root of a DOM tree.\n *\n * @category Feeds\n * @param doc - The DOM to to extract the feed from.\n * @returns The feed.\n */\n\nexport function getFeed(doc) {\n  const feedRoot = getOneElement(isValidFeed, doc);\n  return !feedRoot ? null : feedRoot.name === \"feed\" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);\n}\n/**\n * Parse an Atom feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\n\nfunction getAtomFeed(feedRoot) {\n  var _a;\n\n  const childs = feedRoot.children;\n  const feed = {\n    type: \"atom\",\n    items: getElementsByTagName(\"entry\", childs).map(item => {\n      var _a;\n\n      const {\n        children\n      } = item;\n      const entry = {\n        media: getMediaElements(children)\n      };\n      addConditionally(entry, \"id\", \"id\", children);\n      addConditionally(entry, \"title\", \"title\", children);\n      const href = (_a = getOneElement(\"link\", children)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n\n      if (href) {\n        entry.link = href;\n      }\n\n      const description = fetch(\"summary\", children) || fetch(\"content\", children);\n\n      if (description) {\n        entry.description = description;\n      }\n\n      const pubDate = fetch(\"updated\", children);\n\n      if (pubDate) {\n        entry.pubDate = new Date(pubDate);\n      }\n\n      return entry;\n    })\n  };\n  addConditionally(feed, \"id\", \"id\", childs);\n  addConditionally(feed, \"title\", \"title\", childs);\n  const href = (_a = getOneElement(\"link\", childs)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n\n  if (href) {\n    feed.link = href;\n  }\n\n  addConditionally(feed, \"description\", \"subtitle\", childs);\n  const updated = fetch(\"updated\", childs);\n\n  if (updated) {\n    feed.updated = new Date(updated);\n  }\n\n  addConditionally(feed, \"author\", \"email\", childs, true);\n  return feed;\n}\n/**\n * Parse a RSS feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\n\n\nfunction getRssFeed(feedRoot) {\n  var _a, _b;\n\n  const childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n  const feed = {\n    type: feedRoot.name.substr(0, 3),\n    id: \"\",\n    items: getElementsByTagName(\"item\", feedRoot.children).map(item => {\n      const {\n        children\n      } = item;\n      const entry = {\n        media: getMediaElements(children)\n      };\n      addConditionally(entry, \"id\", \"guid\", children);\n      addConditionally(entry, \"title\", \"title\", children);\n      addConditionally(entry, \"link\", \"link\", children);\n      addConditionally(entry, \"description\", \"description\", children);\n      const pubDate = fetch(\"pubDate\", children);\n      if (pubDate) entry.pubDate = new Date(pubDate);\n      return entry;\n    })\n  };\n  addConditionally(feed, \"title\", \"title\", childs);\n  addConditionally(feed, \"link\", \"link\", childs);\n  addConditionally(feed, \"description\", \"description\", childs);\n  const updated = fetch(\"lastBuildDate\", childs);\n\n  if (updated) {\n    feed.updated = new Date(updated);\n  }\n\n  addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n  return feed;\n}\n\nconst MEDIA_KEYS_STRING = [\"url\", \"type\", \"lang\"];\nconst MEDIA_KEYS_INT = [\"fileSize\", \"bitrate\", \"framerate\", \"samplingrate\", \"channels\", \"duration\", \"height\", \"width\"];\n/**\n * Get all media elements of a feed item.\n *\n * @param where Nodes to search in.\n * @returns Media elements.\n */\n\nfunction getMediaElements(where) {\n  return getElementsByTagName(\"media:content\", where).map(elem => {\n    const {\n      attribs\n    } = elem;\n    const media = {\n      medium: attribs[\"medium\"],\n      isDefault: !!attribs[\"isDefault\"]\n    };\n\n    for (const attrib of MEDIA_KEYS_STRING) {\n      if (attribs[attrib]) {\n        media[attrib] = attribs[attrib];\n      }\n    }\n\n    for (const attrib of MEDIA_KEYS_INT) {\n      if (attribs[attrib]) {\n        media[attrib] = parseInt(attribs[attrib], 10);\n      }\n    }\n\n    if (attribs[\"expression\"]) {\n      media.expression = attribs[\"expression\"];\n    }\n\n    return media;\n  });\n}\n/**\n * Get one element by tag name.\n *\n * @param tagName Tag name to look for\n * @param node Node to search in\n * @returns The element or null\n */\n\n\nfunction getOneElement(tagName, node) {\n  return getElementsByTagName(tagName, node, true, 1)[0];\n}\n/**\n * Get the text content of an element with a certain tag name.\n *\n * @param tagName Tag name to look for.\n * @param where Node to search in.\n * @param recurse Whether to recurse into child nodes.\n * @returns The text content of the element.\n */\n\n\nfunction fetch(tagName, where, recurse = false) {\n  return textContent(getElementsByTagName(tagName, where, recurse, 1)).trim();\n}\n/**\n * Adds a property to an object if it has a value.\n *\n * @param obj Object to be extended\n * @param prop Property name\n * @param tagName Tag name that contains the conditionally added property\n * @param where Element to search for the property\n * @param recurse Whether to recurse into child nodes.\n */\n\n\nfunction addConditionally(obj, prop, tagName, where, recurse = false) {\n  const val = fetch(tagName, where, recurse);\n  if (val) obj[prop] = val;\n}\n/**\n * Checks if an element is a feed root node.\n *\n * @param value The name of the element to check.\n * @returns Whether an element is a feed root node.\n */\n\n\nfunction isValidFeed(value) {\n  return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}","map":{"version":3,"sources":["feeds.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/f7e357b5c210b6731c2a60e0b7b3cfaa1f96b706/src/","sourcesContent":["import { textContent } from \"./stringify.js\";\nimport { getElementsByTagName } from \"./legacy.js\";\n/**\n * Get the feed object from the root of a DOM tree.\n *\n * @category Feeds\n * @param doc - The DOM to to extract the feed from.\n * @returns The feed.\n */\nexport function getFeed(doc) {\n    const feedRoot = getOneElement(isValidFeed, doc);\n    return !feedRoot\n        ? null\n        : feedRoot.name === \"feed\"\n            ? getAtomFeed(feedRoot)\n            : getRssFeed(feedRoot);\n}\n/**\n * Parse an Atom feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\nfunction getAtomFeed(feedRoot) {\n    var _a;\n    const childs = feedRoot.children;\n    const feed = {\n        type: \"atom\",\n        items: getElementsByTagName(\"entry\", childs).map((item) => {\n            var _a;\n            const { children } = item;\n            const entry = { media: getMediaElements(children) };\n            addConditionally(entry, \"id\", \"id\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            const href = (_a = getOneElement(\"link\", children)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n            if (href) {\n                entry.link = href;\n            }\n            const description = fetch(\"summary\", children) || fetch(\"content\", children);\n            if (description) {\n                entry.description = description;\n            }\n            const pubDate = fetch(\"updated\", children);\n            if (pubDate) {\n                entry.pubDate = new Date(pubDate);\n            }\n            return entry;\n        }),\n    };\n    addConditionally(feed, \"id\", \"id\", childs);\n    addConditionally(feed, \"title\", \"title\", childs);\n    const href = (_a = getOneElement(\"link\", childs)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n    if (href) {\n        feed.link = href;\n    }\n    addConditionally(feed, \"description\", \"subtitle\", childs);\n    const updated = fetch(\"updated\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"email\", childs, true);\n    return feed;\n}\n/**\n * Parse a RSS feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\nfunction getRssFeed(feedRoot) {\n    var _a, _b;\n    const childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n    const feed = {\n        type: feedRoot.name.substr(0, 3),\n        id: \"\",\n        items: getElementsByTagName(\"item\", feedRoot.children).map((item) => {\n            const { children } = item;\n            const entry = { media: getMediaElements(children) };\n            addConditionally(entry, \"id\", \"guid\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            addConditionally(entry, \"link\", \"link\", children);\n            addConditionally(entry, \"description\", \"description\", children);\n            const pubDate = fetch(\"pubDate\", children);\n            if (pubDate)\n                entry.pubDate = new Date(pubDate);\n            return entry;\n        }),\n    };\n    addConditionally(feed, \"title\", \"title\", childs);\n    addConditionally(feed, \"link\", \"link\", childs);\n    addConditionally(feed, \"description\", \"description\", childs);\n    const updated = fetch(\"lastBuildDate\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n    return feed;\n}\nconst MEDIA_KEYS_STRING = [\"url\", \"type\", \"lang\"];\nconst MEDIA_KEYS_INT = [\n    \"fileSize\",\n    \"bitrate\",\n    \"framerate\",\n    \"samplingrate\",\n    \"channels\",\n    \"duration\",\n    \"height\",\n    \"width\",\n];\n/**\n * Get all media elements of a feed item.\n *\n * @param where Nodes to search in.\n * @returns Media elements.\n */\nfunction getMediaElements(where) {\n    return getElementsByTagName(\"media:content\", where).map((elem) => {\n        const { attribs } = elem;\n        const media = {\n            medium: attribs[\"medium\"],\n            isDefault: !!attribs[\"isDefault\"],\n        };\n        for (const attrib of MEDIA_KEYS_STRING) {\n            if (attribs[attrib]) {\n                media[attrib] = attribs[attrib];\n            }\n        }\n        for (const attrib of MEDIA_KEYS_INT) {\n            if (attribs[attrib]) {\n                media[attrib] = parseInt(attribs[attrib], 10);\n            }\n        }\n        if (attribs[\"expression\"]) {\n            media.expression = attribs[\"expression\"];\n        }\n        return media;\n    });\n}\n/**\n * Get one element by tag name.\n *\n * @param tagName Tag name to look for\n * @param node Node to search in\n * @returns The element or null\n */\nfunction getOneElement(tagName, node) {\n    return getElementsByTagName(tagName, node, true, 1)[0];\n}\n/**\n * Get the text content of an element with a certain tag name.\n *\n * @param tagName Tag name to look for.\n * @param where Node to search in.\n * @param recurse Whether to recurse into child nodes.\n * @returns The text content of the element.\n */\nfunction fetch(tagName, where, recurse = false) {\n    return textContent(getElementsByTagName(tagName, where, recurse, 1)).trim();\n}\n/**\n * Adds a property to an object if it has a value.\n *\n * @param obj Object to be extended\n * @param prop Property name\n * @param tagName Tag name that contains the conditionally added property\n * @param where Element to search for the property\n * @param recurse Whether to recurse into child nodes.\n */\nfunction addConditionally(obj, prop, tagName, where, recurse = false) {\n    const val = fetch(tagName, where, recurse);\n    if (val)\n        obj[prop] = val;\n}\n/**\n * Checks if an element is a feed root node.\n *\n * @param value The name of the element to check.\n * @returns Whether an element is a feed root node.\n */\nfunction isValidFeed(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}\n//# sourceMappingURL=feeds.js.map"]},"metadata":{},"sourceType":"module"}