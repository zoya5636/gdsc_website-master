{"ast":null,"code":"/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */\nexport function removeElement(elem) {\n  if (elem.prev) elem.prev.next = elem.next;\n  if (elem.next) elem.next.prev = elem.prev;\n\n  if (elem.parent) {\n    const childs = elem.parent.children;\n    childs.splice(childs.lastIndexOf(elem), 1);\n  }\n}\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */\n\nexport function replaceElement(elem, replacement) {\n  const prev = replacement.prev = elem.prev;\n\n  if (prev) {\n    prev.next = replacement;\n  }\n\n  const next = replacement.next = elem.next;\n\n  if (next) {\n    next.prev = replacement;\n  }\n\n  const parent = replacement.parent = elem.parent;\n\n  if (parent) {\n    const childs = parent.children;\n    childs[childs.lastIndexOf(elem)] = replacement;\n    elem.parent = null;\n  }\n}\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param elem The element to append to.\n * @param child The element to be added as a child.\n */\n\nexport function appendChild(elem, child) {\n  removeElement(child);\n  child.next = null;\n  child.parent = elem;\n\n  if (elem.children.push(child) > 1) {\n    const sibling = elem.children[elem.children.length - 2];\n    sibling.next = child;\n    child.prev = sibling;\n  } else {\n    child.prev = null;\n  }\n}\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */\n\nexport function append(elem, next) {\n  removeElement(next);\n  const {\n    parent\n  } = elem;\n  const currNext = elem.next;\n  next.next = currNext;\n  next.prev = elem;\n  elem.next = next;\n  next.parent = parent;\n\n  if (currNext) {\n    currNext.prev = next;\n\n    if (parent) {\n      const childs = parent.children;\n      childs.splice(childs.lastIndexOf(currNext), 0, next);\n    }\n  } else if (parent) {\n    parent.children.push(next);\n  }\n}\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param child The element to be added as a child.\n */\n\nexport function prependChild(elem, child) {\n  removeElement(child);\n  child.parent = elem;\n  child.prev = null;\n\n  if (elem.children.unshift(child) !== 1) {\n    const sibling = elem.children[1];\n    sibling.prev = child;\n    child.next = sibling;\n  } else {\n    child.next = null;\n  }\n}\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */\n\nexport function prepend(elem, prev) {\n  removeElement(prev);\n  const {\n    parent\n  } = elem;\n\n  if (parent) {\n    const childs = parent.children;\n    childs.splice(childs.indexOf(elem), 0, prev);\n  }\n\n  if (elem.prev) {\n    elem.prev.next = prev;\n  }\n\n  prev.parent = parent;\n  prev.prev = elem.prev;\n  prev.next = elem;\n  elem.prev = prev;\n}","map":{"version":3,"sources":["manipulation.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/f7e357b5c210b6731c2a60e0b7b3cfaa1f96b706/src/","sourcesContent":["/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */\nexport function removeElement(elem) {\n    if (elem.prev)\n        elem.prev.next = elem.next;\n    if (elem.next)\n        elem.next.prev = elem.prev;\n    if (elem.parent) {\n        const childs = elem.parent.children;\n        childs.splice(childs.lastIndexOf(elem), 1);\n    }\n}\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */\nexport function replaceElement(elem, replacement) {\n    const prev = (replacement.prev = elem.prev);\n    if (prev) {\n        prev.next = replacement;\n    }\n    const next = (replacement.next = elem.next);\n    if (next) {\n        next.prev = replacement;\n    }\n    const parent = (replacement.parent = elem.parent);\n    if (parent) {\n        const childs = parent.children;\n        childs[childs.lastIndexOf(elem)] = replacement;\n        elem.parent = null;\n    }\n}\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param elem The element to append to.\n * @param child The element to be added as a child.\n */\nexport function appendChild(elem, child) {\n    removeElement(child);\n    child.next = null;\n    child.parent = elem;\n    if (elem.children.push(child) > 1) {\n        const sibling = elem.children[elem.children.length - 2];\n        sibling.next = child;\n        child.prev = sibling;\n    }\n    else {\n        child.prev = null;\n    }\n}\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */\nexport function append(elem, next) {\n    removeElement(next);\n    const { parent } = elem;\n    const currNext = elem.next;\n    next.next = currNext;\n    next.prev = elem;\n    elem.next = next;\n    next.parent = parent;\n    if (currNext) {\n        currNext.prev = next;\n        if (parent) {\n            const childs = parent.children;\n            childs.splice(childs.lastIndexOf(currNext), 0, next);\n        }\n    }\n    else if (parent) {\n        parent.children.push(next);\n    }\n}\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param child The element to be added as a child.\n */\nexport function prependChild(elem, child) {\n    removeElement(child);\n    child.parent = elem;\n    child.prev = null;\n    if (elem.children.unshift(child) !== 1) {\n        const sibling = elem.children[1];\n        sibling.prev = child;\n        child.next = sibling;\n    }\n    else {\n        child.next = null;\n    }\n}\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */\nexport function prepend(elem, prev) {\n    removeElement(prev);\n    const { parent } = elem;\n    if (parent) {\n        const childs = parent.children;\n        childs.splice(childs.indexOf(elem), 0, prev);\n    }\n    if (elem.prev) {\n        elem.prev.next = prev;\n    }\n    prev.parent = parent;\n    prev.prev = elem.prev;\n    prev.next = elem;\n    elem.prev = prev;\n}\n//# sourceMappingURL=manipulation.js.map"]},"metadata":{},"sourceType":"module"}