{"ast":null,"code":"/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nimport { Text, hasChildren } from 'domhandler';\nimport { update as updateDOM } from '../parse.js';\nimport { text as staticText } from '../static.js';\nimport { domEach, cloneDom, isTag, isHtml, isCheerio } from '../utils.js';\nimport { removeElement } from 'domutils';\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\n\nexport function _makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  }\n\n  if (isCheerio(elem)) {\n    return clone ? cloneDom(elem.get()) : elem.get();\n  }\n\n  if (Array.isArray(elem)) {\n    return elem.reduce((newElems, el) => newElems.concat(this._makeDomArray(el, clone)), []);\n  }\n\n  if (typeof elem === 'string') {\n    return this._parse(elem, this.options, false, null).children;\n  }\n\n  return clone ? cloneDom([elem]) : [elem];\n}\n\nfunction _insert(concatenator) {\n  return function (...elems) {\n    const lastIdx = this.length - 1;\n    return domEach(this, (el, i) => {\n      if (!hasChildren(el)) return;\n      const domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, this._render(el.children)) : elems;\n\n      const dom = this._makeDomArray(domSrc, i < lastIdx);\n\n      concatenator(dom, el.children, el);\n    });\n  };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\n\n\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n  var _a, _b;\n\n  const spliceArgs = [spliceIdx, spliceCount, ...newElems];\n  const prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n  const next = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];\n  /*\n   * Before splicing in new elements, ensure they do not already appear in the\n   * current array.\n   */\n\n  for (let idx = 0; idx < newElems.length; ++idx) {\n    const node = newElems[idx];\n    const oldParent = node.parent;\n\n    if (oldParent) {\n      const oldSiblings = oldParent.children;\n      const prevIdx = oldSiblings.indexOf(node);\n\n      if (prevIdx > -1) {\n        oldParent.children.splice(prevIdx, 1);\n\n        if (parent === oldParent && spliceIdx > prevIdx) {\n          spliceArgs[0]--;\n        }\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n    }\n\n    if (node.next) {\n      node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n    }\n\n    node.prev = idx === 0 ? prev : newElems[idx - 1];\n    node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n\n  return array.splice(...spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\n\n\nexport function appendTo(target) {\n  const appendTarget = isCheerio(target) ? target : this._make(target);\n  appendTarget.append(this);\n  return this;\n}\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\n\nexport function prependTo(target) {\n  const prependTarget = isCheerio(target) ? target : this._make(target);\n  prependTarget.prepend(this);\n  return this;\n}\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\n\nexport const append = _insert((dom, children, parent) => {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\n\nexport const prepend = _insert((dom, children, parent) => {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    const lastIdx = this.length - 1;\n    const lastParent = this.parents().last();\n\n    for (let i = 0; i < this.length; i++) {\n      const el = this[i];\n      const wrap = typeof wrapper === 'function' ? wrapper.call(el, i, el) : typeof wrapper === 'string' && !isHtml(wrapper) ? lastParent.find(wrapper).clone() : wrapper;\n\n      const [wrapperDom] = this._makeDomArray(wrap, i < lastIdx);\n\n      if (!wrapperDom || !hasChildren(wrapperDom)) continue;\n      let elInsertLocation = wrapperDom;\n      /*\n       * Find the deepest child. Only consider the first tag child of each node\n       * (ignore text); stop if no children are found.\n       */\n\n      let j = 0;\n\n      while (j < elInsertLocation.children.length) {\n        const child = elInsertLocation.children[j];\n\n        if (isTag(child)) {\n          elInsertLocation = child;\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, [wrapperDom]);\n    }\n\n    return this;\n  };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\n\n\nexport const wrap = _wrap((el, elInsertLocation, wrapperDom) => {\n  const {\n    parent\n  } = el;\n  if (!parent) return;\n  const siblings = parent.children;\n  const index = siblings.indexOf(el);\n  updateDOM([el], elInsertLocation);\n  /*\n   * The previous operation removed the current element from the `siblings`\n   * array, so the `dom` array can be inserted without removing any\n   * additional elements.\n   */\n\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\n\nexport const wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {\n  if (!hasChildren(el)) return;\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\n\nexport function unwrap(selector) {\n  this.parent(selector).not('body').each((_, el) => {\n    this._make(el).replaceWith(el.children);\n  });\n  return this;\n}\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\n\nexport function wrapAll(wrapper) {\n  const el = this[0];\n\n  if (el) {\n    const wrap = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el); // If html is given as wrapper, wrap may contain text elements\n\n\n    let elInsertLocation;\n\n    for (let i = 0; i < wrap.length; i++) {\n      if (wrap[i].type === 'tag') elInsertLocation = wrap[i];\n    }\n\n    let j = 0;\n    /*\n     * Find the deepest child. Only consider the first tag child of each node\n     * (ignore text); stop if no children are found.\n     */\n\n    while (elInsertLocation && j < elInsertLocation.children.length) {\n      const child = elInsertLocation.children[j];\n\n      if (child.type === 'tag') {\n        elInsertLocation = child;\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n\n    if (elInsertLocation) this._make(elInsertLocation).append(this);\n  }\n\n  return this;\n}\n/* eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\n\nexport function after(...elems) {\n  const lastIdx = this.length - 1;\n  return domEach(this, (el, i) => {\n    const {\n      parent\n    } = el;\n\n    if (!hasChildren(el) || !parent) {\n      return;\n    }\n\n    const siblings = parent.children;\n    const index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return;\n    const domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, this._render(el.children)) : elems;\n\n    const dom = this._makeDomArray(domSrc, i < lastIdx); // Add element after `this` element\n\n\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n}\n/* eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\n\nexport function insertAfter(target) {\n  if (typeof target === 'string') {\n    target = this._make(target);\n  }\n\n  this.remove();\n  const clones = [];\n\n  this._makeDomArray(target).forEach(el => {\n    const clonedSelf = this.clone().toArray();\n    const {\n      parent\n    } = el;\n\n    if (!parent) {\n      return;\n    }\n\n    const siblings = parent.children;\n    const index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(...clonedSelf);\n  });\n\n  return this._make(clones);\n}\n/* eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\n\nexport function before(...elems) {\n  const lastIdx = this.length - 1;\n  return domEach(this, (el, i) => {\n    const {\n      parent\n    } = el;\n\n    if (!hasChildren(el) || !parent) {\n      return;\n    }\n\n    const siblings = parent.children;\n    const index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return;\n    const domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, this._render(el.children)) : elems;\n\n    const dom = this._makeDomArray(domSrc, i < lastIdx); // Add element before `el` element\n\n\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n}\n/* eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\n\nexport function insertBefore(target) {\n  const targetArr = this._make(target);\n\n  this.remove();\n  const clones = [];\n  domEach(targetArr, el => {\n    const clonedSelf = this.clone().toArray();\n    const {\n      parent\n    } = el;\n\n    if (!parent) {\n      return;\n    }\n\n    const siblings = parent.children;\n    const index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(...clonedSelf);\n  });\n  return this._make(clones);\n}\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\n\nexport function remove(selector) {\n  // Filter if we have selector\n  const elems = selector ? this.filter(selector) : this;\n  domEach(elems, el => {\n    removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n  return this;\n}\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\n\nexport function replaceWith(content) {\n  return domEach(this, (el, i) => {\n    const {\n      parent\n    } = el;\n\n    if (!parent) {\n      return;\n    }\n\n    const siblings = parent.children;\n    const cont = typeof content === 'function' ? content.call(el, i, el) : content;\n\n    const dom = this._makeDomArray(cont);\n    /*\n     * In the case that `dom` contains nodes that already exist in other\n     * structures, ensure those nodes are properly removed.\n     */\n\n\n    updateDOM(dom, null);\n    const index = siblings.indexOf(el); // Completely remove old element\n\n    uniqueSplice(siblings, index, 1, dom, parent);\n\n    if (!dom.includes(el)) {\n      el.parent = el.prev = el.next = null;\n    }\n  });\n}\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\n\nexport function empty() {\n  return domEach(this, el => {\n    if (!hasChildren(el)) return;\n    el.children.forEach(child => {\n      child.next = child.prev = child.parent = null;\n    });\n    el.children.length = 0;\n  });\n}\nexport function html(str) {\n  if (str === undefined) {\n    const el = this[0];\n    if (!el || !hasChildren(el)) return null;\n    return this._render(el.children);\n  }\n\n  return domEach(this, el => {\n    if (!hasChildren(el)) return;\n    el.children.forEach(child => {\n      child.next = child.prev = child.parent = null;\n    });\n    const content = isCheerio(str) ? str.toArray() : this._parse(`${str}`, this.options, false, el).children;\n    updateDOM(content, el);\n  });\n}\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\n\nexport function toString() {\n  return this._render(this);\n}\nexport function text(str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return staticText(this);\n  }\n\n  if (typeof str === 'function') {\n    // Function support\n    return domEach(this, (el, i) => this._make(el).text(str.call(el, i, staticText([el]))));\n  } // Append text node to each selected elements\n\n\n  return domEach(this, el => {\n    if (!hasChildren(el)) return;\n    el.children.forEach(child => {\n      child.next = child.prev = child.parent = null;\n    });\n    const textNode = new Text(`${str}`);\n    updateDOM(textNode, el);\n  });\n}\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\n\nexport function clone() {\n  return this._make(cloneDom(this.get()));\n}","map":{"version":3,"sources":["api/manipulation.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nimport { Text, hasChildren } from 'domhandler';\nimport { update as updateDOM } from '../parse.js';\nimport { text as staticText } from '../static.js';\nimport { domEach, cloneDom, isTag, isHtml, isCheerio } from '../utils.js';\nimport { removeElement } from 'domutils';\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nexport function _makeDomArray(elem, clone) {\n    if (elem == null) {\n        return [];\n    }\n    if (isCheerio(elem)) {\n        return clone ? cloneDom(elem.get()) : elem.get();\n    }\n    if (Array.isArray(elem)) {\n        return elem.reduce((newElems, el) => newElems.concat(this._makeDomArray(el, clone)), []);\n    }\n    if (typeof elem === 'string') {\n        return this._parse(elem, this.options, false, null).children;\n    }\n    return clone ? cloneDom([elem]) : [elem];\n}\nfunction _insert(concatenator) {\n    return function (...elems) {\n        const lastIdx = this.length - 1;\n        return domEach(this, (el, i) => {\n            if (!hasChildren(el))\n                return;\n            const domSrc = typeof elems[0] === 'function'\n                ? elems[0].call(el, i, this._render(el.children))\n                : elems;\n            const dom = this._makeDomArray(domSrc, i < lastIdx);\n            concatenator(dom, el.children, el);\n        });\n    };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n    var _a, _b;\n    const spliceArgs = [\n        spliceIdx,\n        spliceCount,\n        ...newElems,\n    ];\n    const prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n    const next = spliceIdx + spliceCount >= array.length\n        ? null\n        : array[spliceIdx + spliceCount];\n    /*\n     * Before splicing in new elements, ensure they do not already appear in the\n     * current array.\n     */\n    for (let idx = 0; idx < newElems.length; ++idx) {\n        const node = newElems[idx];\n        const oldParent = node.parent;\n        if (oldParent) {\n            const oldSiblings = oldParent.children;\n            const prevIdx = oldSiblings.indexOf(node);\n            if (prevIdx > -1) {\n                oldParent.children.splice(prevIdx, 1);\n                if (parent === oldParent && spliceIdx > prevIdx) {\n                    spliceArgs[0]--;\n                }\n            }\n        }\n        node.parent = parent;\n        if (node.prev) {\n            node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n        }\n        if (node.next) {\n            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n        }\n        node.prev = idx === 0 ? prev : newElems[idx - 1];\n        node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n    }\n    if (prev) {\n        prev.next = newElems[0];\n    }\n    if (next) {\n        next.prev = newElems[newElems.length - 1];\n    }\n    return array.splice(...spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nexport function appendTo(target) {\n    const appendTarget = isCheerio(target) ? target : this._make(target);\n    appendTarget.append(this);\n    return this;\n}\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nexport function prependTo(target) {\n    const prependTarget = isCheerio(target) ? target : this._make(target);\n    prependTarget.prepend(this);\n    return this;\n}\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexport const append = _insert((dom, children, parent) => {\n    uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexport const prepend = _insert((dom, children, parent) => {\n    uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n    return function (wrapper) {\n        const lastIdx = this.length - 1;\n        const lastParent = this.parents().last();\n        for (let i = 0; i < this.length; i++) {\n            const el = this[i];\n            const wrap = typeof wrapper === 'function'\n                ? wrapper.call(el, i, el)\n                : typeof wrapper === 'string' && !isHtml(wrapper)\n                    ? lastParent.find(wrapper).clone()\n                    : wrapper;\n            const [wrapperDom] = this._makeDomArray(wrap, i < lastIdx);\n            if (!wrapperDom || !hasChildren(wrapperDom))\n                continue;\n            let elInsertLocation = wrapperDom;\n            /*\n             * Find the deepest child. Only consider the first tag child of each node\n             * (ignore text); stop if no children are found.\n             */\n            let j = 0;\n            while (j < elInsertLocation.children.length) {\n                const child = elInsertLocation.children[j];\n                if (isTag(child)) {\n                    elInsertLocation = child;\n                    j = 0;\n                }\n                else {\n                    j++;\n                }\n            }\n            insert(el, elInsertLocation, [wrapperDom]);\n        }\n        return this;\n    };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexport const wrap = _wrap((el, elInsertLocation, wrapperDom) => {\n    const { parent } = el;\n    if (!parent)\n        return;\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    updateDOM([el], elInsertLocation);\n    /*\n     * The previous operation removed the current element from the `siblings`\n     * array, so the `dom` array can be inserted without removing any\n     * additional elements.\n     */\n    uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexport const wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {\n    if (!hasChildren(el))\n        return;\n    updateDOM(el.children, elInsertLocation);\n    updateDOM(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nexport function unwrap(selector) {\n    this.parent(selector)\n        .not('body')\n        .each((_, el) => {\n        this._make(el).replaceWith(el.children);\n    });\n    return this;\n}\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nexport function wrapAll(wrapper) {\n    const el = this[0];\n    if (el) {\n        const wrap = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n        // If html is given as wrapper, wrap may contain text elements\n        let elInsertLocation;\n        for (let i = 0; i < wrap.length; i++) {\n            if (wrap[i].type === 'tag')\n                elInsertLocation = wrap[i];\n        }\n        let j = 0;\n        /*\n         * Find the deepest child. Only consider the first tag child of each node\n         * (ignore text); stop if no children are found.\n         */\n        while (elInsertLocation && j < elInsertLocation.children.length) {\n            const child = elInsertLocation.children[j];\n            if (child.type === 'tag') {\n                elInsertLocation = child;\n                j = 0;\n            }\n            else {\n                j++;\n            }\n        }\n        if (elInsertLocation)\n            this._make(elInsertLocation).append(this);\n    }\n    return this;\n}\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nexport function after(...elems) {\n    const lastIdx = this.length - 1;\n    return domEach(this, (el, i) => {\n        const { parent } = el;\n        if (!hasChildren(el) || !parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        const domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, this._render(el.children))\n            : elems;\n        const dom = this._makeDomArray(domSrc, i < lastIdx);\n        // Add element after `this` element\n        uniqueSplice(siblings, index + 1, 0, dom, parent);\n    });\n}\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nexport function insertAfter(target) {\n    if (typeof target === 'string') {\n        target = this._make(target);\n    }\n    this.remove();\n    const clones = [];\n    this._makeDomArray(target).forEach((el) => {\n        const clonedSelf = this.clone().toArray();\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n        clones.push(...clonedSelf);\n    });\n    return this._make(clones);\n}\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nexport function before(...elems) {\n    const lastIdx = this.length - 1;\n    return domEach(this, (el, i) => {\n        const { parent } = el;\n        if (!hasChildren(el) || !parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        const domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, this._render(el.children))\n            : elems;\n        const dom = this._makeDomArray(domSrc, i < lastIdx);\n        // Add element before `el` element\n        uniqueSplice(siblings, index, 0, dom, parent);\n    });\n}\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nexport function insertBefore(target) {\n    const targetArr = this._make(target);\n    this.remove();\n    const clones = [];\n    domEach(targetArr, (el) => {\n        const clonedSelf = this.clone().toArray();\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index, 0, clonedSelf, parent);\n        clones.push(...clonedSelf);\n    });\n    return this._make(clones);\n}\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nexport function remove(selector) {\n    // Filter if we have selector\n    const elems = selector ? this.filter(selector) : this;\n    domEach(elems, (el) => {\n        removeElement(el);\n        el.prev = el.next = el.parent = null;\n    });\n    return this;\n}\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nexport function replaceWith(content) {\n    return domEach(this, (el, i) => {\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const cont = typeof content === 'function' ? content.call(el, i, el) : content;\n        const dom = this._makeDomArray(cont);\n        /*\n         * In the case that `dom` contains nodes that already exist in other\n         * structures, ensure those nodes are properly removed.\n         */\n        updateDOM(dom, null);\n        const index = siblings.indexOf(el);\n        // Completely remove old element\n        uniqueSplice(siblings, index, 1, dom, parent);\n        if (!dom.includes(el)) {\n            el.parent = el.prev = el.next = null;\n        }\n    });\n}\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nexport function empty() {\n    return domEach(this, (el) => {\n        if (!hasChildren(el))\n            return;\n        el.children.forEach((child) => {\n            child.next = child.prev = child.parent = null;\n        });\n        el.children.length = 0;\n    });\n}\nexport function html(str) {\n    if (str === undefined) {\n        const el = this[0];\n        if (!el || !hasChildren(el))\n            return null;\n        return this._render(el.children);\n    }\n    return domEach(this, (el) => {\n        if (!hasChildren(el))\n            return;\n        el.children.forEach((child) => {\n            child.next = child.prev = child.parent = null;\n        });\n        const content = isCheerio(str)\n            ? str.toArray()\n            : this._parse(`${str}`, this.options, false, el).children;\n        updateDOM(content, el);\n    });\n}\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nexport function toString() {\n    return this._render(this);\n}\nexport function text(str) {\n    // If `str` is undefined, act as a \"getter\"\n    if (str === undefined) {\n        return staticText(this);\n    }\n    if (typeof str === 'function') {\n        // Function support\n        return domEach(this, (el, i) => this._make(el).text(str.call(el, i, staticText([el]))));\n    }\n    // Append text node to each selected elements\n    return domEach(this, (el) => {\n        if (!hasChildren(el))\n            return;\n        el.children.forEach((child) => {\n            child.next = child.prev = child.parent = null;\n        });\n        const textNode = new Text(`${str}`);\n        updateDOM(textNode, el);\n    });\n}\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nexport function clone() {\n    return this._make(cloneDom(this.get()));\n}\n//# sourceMappingURL=manipulation.js.map"]},"metadata":{},"sourceType":"module"}