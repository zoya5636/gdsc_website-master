{"ast":null,"code":"import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\n\nexport function parseWithParse5(content, options, isDocument, context) {\n  const opts = {\n    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  };\n  return isDocument ? parseDocument(content, opts) : parseFragment(context, content, opts);\n}\nconst renderOpts = {\n  treeAdapter: htmlparser2Adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\n\nexport function renderWithParse5(dom) {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n\n  let result = '';\n\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["parsers/parse5-adapter.ts"],"names":[],"mappings":"AAAA,SAA4B,UAA5B,QAA0D,YAA1D;AACA,SAAS,KAAK,IAAI,aAAlB,EAAiC,aAAjC,EAAgD,cAAhD,QAAsE,QAAtE;AACA,SAAS,OAAO,IAAI,kBAApB,QAA8C,iCAA9C;AAGA;;;;;;;;AAQG;;AACH,OAAM,SAAU,eAAV,CACJ,OADI,EAEJ,OAFI,EAGJ,UAHI,EAIJ,OAJI,EAIsB;AAE1B,QAAM,IAAI,GAAG;AACX,IAAA,gBAAgB,EACd,OAAO,OAAO,CAAC,gBAAf,KAAoC,SAApC,GACI,OAAO,CAAC,gBADZ,GAEI,IAJK;AAKX,IAAA,WAAW,EAAE,kBALF;AAMX,IAAA,sBAAsB,EAAE,OAAO,CAAC;AANrB,GAAb;AASA,SAAO,UAAU,GACb,aAAa,CAAC,OAAD,EAAU,IAAV,CADA,GAEb,aAAa,CAAC,OAAD,EAAU,OAAV,EAAmB,IAAnB,CAFjB;AAGD;AAED,MAAM,UAAU,GAAG;AAAE,EAAA,WAAW,EAAE;AAAf,CAAnB;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAA4D;AAChE;;;;AAIG;AACH,QAAM,KAAK,GAAG,YAAY,GAAZ,GAAkB,GAAlB,GAAwB,CAAC,GAAD,CAAtC;;AACA,OAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,KAAK,CAAC,MAAlC,EAA0C,KAAK,IAAI,CAAnD,EAAsD;AACpD,UAAM,IAAI,GAAG,KAAK,CAAC,KAAD,CAAlB;;AACA,QAAI,UAAU,CAAC,IAAD,CAAd,EAAsB;AACpB,MAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,IAAvB,CAA4B,KAA5B,EAAmC,KAAnC,EAA0C,CAA1C,EAA6C,GAAG,IAAI,CAAC,QAArD;AACD;AACF;;AAED,MAAI,MAAM,GAAG,EAAb;;AACA,OAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,KAAK,CAAC,MAAlC,EAA0C,KAAK,IAAI,CAAnD,EAAsD;AACpD,UAAM,IAAI,GAAG,KAAK,CAAC,KAAD,CAAlB;AACA,IAAA,MAAM,IAAI,cAAc,CAAC,IAAD,EAAO,UAAP,CAAxB;AACD;;AAED,SAAO,MAAP;AACD","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n    const opts = {\n        scriptingEnabled: typeof options.scriptingEnabled === 'boolean'\n            ? options.scriptingEnabled\n            : true,\n        treeAdapter: htmlparser2Adapter,\n        sourceCodeLocationInfo: options.sourceCodeLocationInfo,\n    };\n    return isDocument\n        ? parseDocument(content, opts)\n        : parseFragment(context, content, opts);\n}\nconst renderOpts = { treeAdapter: htmlparser2Adapter };\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n    /*\n     * `dom-serializer` passes over the special \"root\" node and renders the\n     * node's children in its place. To mimic this behavior with `parse5`, an\n     * equivalent operation must be applied to the input array.\n     */\n    const nodes = 'length' in dom ? dom : [dom];\n    for (let index = 0; index < nodes.length; index += 1) {\n        const node = nodes[index];\n        if (isDocument(node)) {\n            Array.prototype.splice.call(nodes, index, 1, ...node.children);\n        }\n    }\n    let result = '';\n    for (let index = 0; index < nodes.length; index += 1) {\n        const node = nodes[index];\n        result += serializeOuter(node, renderOpts);\n    }\n    return result;\n}\n//# sourceMappingURL=parse5-adapter.js.map"]},"metadata":{},"sourceType":"module"}