{"ast":null,"code":"import { Parser } from \"./Parser.js\";\nexport { Parser };\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler }; // Helper methods\n\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\n\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\n\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\n\nexport function createDomStream(cb, options, elementCb) {\n  const handler = new DomHandler(cb, options, elementCb);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\n\nimport * as ElementType from \"domelementtype\";\nexport { ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed };\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\n\nexport function parseFeed(feed, options = {\n  xmlMode: true\n}) {\n  return getFeed(parseDOM(feed, options));\n}\nexport * as DomUtils from \"domutils\"; // Old name for DomHandler\n\nexport { DomHandler as DefaultHandler };","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAsC,aAAtC;AACA,SAAS,MAAT;AAEA,SACI,UADJ,QAMO,YANP;AAQA,SAAS,UAAT,G,CAIA;;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAsC,OAAtC,EAAuD;AACzD,QAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,SAAf,EAA0B,OAA1B,CAAhB;AACA,MAAI,MAAJ,CAAW,OAAX,EAAoB,OAApB,EAA6B,GAA7B,CAAiC,IAAjC;AACA,SAAO,OAAO,CAAC,IAAf;AACH;AACD;;;;;;;;;AASG;;AACH,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAAiC,OAAjC,EAAkD;AACpD,SAAO,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb,CAA6B,QAApC;AACH;AACD;;;;;;AAMG;;AACH,OAAM,SAAU,eAAV,CACF,EADE,EAEF,OAFE,EAGF,SAHE,EAGoC;AAEtC,QAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,EAAf,EAAmB,OAAnB,EAA4B,SAA5B,CAAhB;AACA,SAAO,IAAI,MAAJ,CAAW,OAAX,EAAoB,OAApB,CAAP;AACH;AAED,SACI,OAAO,IAAI,SADf,QAGO,gBAHP;AAKA;;;AAGG;;AACH,OAAO,KAAK,WAAZ,MAA6B,gBAA7B;AACA,SAAS,WAAT;AAEA,SAAS,OAAT,QAA8B,UAA9B;AAEA,SAAS,OAAT;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,SAAV,CACF,IADE,EAEF,OAAA,GAA6C;AAAE,EAAA,OAAO,EAAE;AAAX,CAF3C,EAE4D;AAE9D,SAAO,OAAO,CAAC,QAAQ,CAAC,IAAD,EAAO,OAAP,CAAT,CAAd;AACH;AAED,OAAO,KAAK,QAAZ,MAA0B,UAA1B,C,CAEA;;AACA,SAAS,UAAU,IAAI,cAAvB","sourceRoot":"https://raw.githubusercontent.com/fb55/htmlparser2/4763205746cd80120b5d2b69041197a394d24ba9/src/","sourcesContent":["import { Parser } from \"./Parser.js\";\nexport { Parser };\nimport { DomHandler, } from \"domhandler\";\nexport { DomHandler };\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nexport function parseDocument(data, options) {\n    const handler = new DomHandler(undefined, options);\n    new Parser(handler, options).end(data);\n    return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDomStream(cb, options, elementCb) {\n    const handler = new DomHandler(cb, options, elementCb);\n    return new Parser(handler, options);\n}\nexport { default as Tokenizer, } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nimport * as ElementType from \"domelementtype\";\nexport { ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed };\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed, options = { xmlMode: true }) {\n    return getFeed(parseDOM(feed, options));\n}\nexport * as DomUtils from \"domutils\";\n// Old name for DomHandler\nexport { DomHandler as DefaultHandler };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}