{"ast":null,"code":"import { default as defaultOptions, flatten as flattenOptions } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n  /**\n   * Create a querying function, bound to a document created from the provided markup.\n   *\n   * Note that similar to web browser contexts, this operation may introduce\n   * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n   * switch to fragment mode and disable this.\n   *\n   * @param content - Markup to be loaded.\n   * @param options - Options for the created instance.\n   * @param isDocument - Allows parser to be switched to fragment mode.\n   * @returns The loaded document.\n   * @see {@link https://cheerio.js.org#loading} for additional usage information.\n   */\n  return function load(content, options, isDocument = true) {\n    if (content == null) {\n      throw new Error('cheerio.load() expects a string');\n    }\n\n    const internalOpts = { ...defaultOptions,\n      ...flattenOptions(options)\n    };\n    const initialRoot = parse(content, internalOpts, isDocument, null);\n    /** Create an extended class here, so that extensions only live on one instance. */\n\n    class LoadedCheerio extends Cheerio {\n      _make(selector, context) {\n        const cheerio = initialize(selector, context);\n        cheerio.prevObject = this;\n        return cheerio;\n      }\n\n      _parse(content, options, isDocument, context) {\n        return parse(content, options, isDocument, context);\n      }\n\n      _render(dom) {\n        return render(dom, this.options);\n      }\n\n    }\n\n    function initialize(selector, context, root = initialRoot, opts) {\n      // $($)\n      if (selector && isCheerio(selector)) return selector;\n      const options = { ...internalOpts,\n        ...flattenOptions(opts)\n      };\n      const r = typeof root === 'string' ? [parse(root, options, false, null)] : 'length' in root ? root : [root];\n      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options); // Add a cyclic reference, so that calling methods on `_root` never fails.\n\n      rootInstance._root = rootInstance; // $(), $(null), $(undefined), $(false)\n\n      if (!selector) {\n        return new LoadedCheerio(undefined, rootInstance, options);\n      }\n\n      const elements = typeof selector === 'string' && isHtml(selector) ? // $(<html>)\n      parse(selector, options, false, null).children : isNode(selector) ? // $(dom)\n      [selector] : Array.isArray(selector) ? // $([dom])\n      selector : undefined;\n      const instance = new LoadedCheerio(elements, rootInstance, options);\n\n      if (elements) {\n        return instance;\n      }\n\n      if (typeof selector !== 'string') {\n        throw new Error('Unexpected type of selector');\n      } // We know that our selector is a string now.\n\n\n      let search = selector;\n      const searchContext = !context ? // If we don't have a context, maybe we have a root, from loading\n      rootInstance : typeof context === 'string' ? isHtml(context) ? // $('li', '<ul>...</ul>')\n      new LoadedCheerio([parse(context, options, false, null)], rootInstance, options) : ( // $('li', 'ul')\n      search = `${context} ${search}`, rootInstance) : isCheerio(context) ? // $('li', $)\n      context : // $('li', node), $('li', [nodes])\n      new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options); // If we still don't have a context, return\n\n      if (!searchContext) return instance;\n      /*\n       * #id, .class, tag\n       */\n\n      return searchContext.find(search);\n    } // Add in static methods & properties\n\n\n    Object.assign(initialize, staticMethods, {\n      load,\n      // `_root` and `_options` are used in static methods.\n      _root: initialRoot,\n      _options: internalOpts,\n      // Add `fn` for plugins\n      fn: LoadedCheerio.prototype,\n      // Add the prototype here to maintain `instanceof` behavior.\n      prototype: LoadedCheerio.prototype\n    });\n    return initialize;\n  };\n}\n\nfunction isNode(obj) {\n  return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';\n}","map":{"version":3,"sources":["load.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { default as defaultOptions, flatten as flattenOptions, } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n    /**\n     * Create a querying function, bound to a document created from the provided markup.\n     *\n     * Note that similar to web browser contexts, this operation may introduce\n     * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n     * switch to fragment mode and disable this.\n     *\n     * @param content - Markup to be loaded.\n     * @param options - Options for the created instance.\n     * @param isDocument - Allows parser to be switched to fragment mode.\n     * @returns The loaded document.\n     * @see {@link https://cheerio.js.org#loading} for additional usage information.\n     */\n    return function load(content, options, isDocument = true) {\n        if (content == null) {\n            throw new Error('cheerio.load() expects a string');\n        }\n        const internalOpts = { ...defaultOptions, ...flattenOptions(options) };\n        const initialRoot = parse(content, internalOpts, isDocument, null);\n        /** Create an extended class here, so that extensions only live on one instance. */\n        class LoadedCheerio extends Cheerio {\n            _make(selector, context) {\n                const cheerio = initialize(selector, context);\n                cheerio.prevObject = this;\n                return cheerio;\n            }\n            _parse(content, options, isDocument, context) {\n                return parse(content, options, isDocument, context);\n            }\n            _render(dom) {\n                return render(dom, this.options);\n            }\n        }\n        function initialize(selector, context, root = initialRoot, opts) {\n            // $($)\n            if (selector && isCheerio(selector))\n                return selector;\n            const options = {\n                ...internalOpts,\n                ...flattenOptions(opts),\n            };\n            const r = typeof root === 'string'\n                ? [parse(root, options, false, null)]\n                : 'length' in root\n                    ? root\n                    : [root];\n            const rootInstance = isCheerio(r)\n                ? r\n                : new LoadedCheerio(r, null, options);\n            // Add a cyclic reference, so that calling methods on `_root` never fails.\n            rootInstance._root = rootInstance;\n            // $(), $(null), $(undefined), $(false)\n            if (!selector) {\n                return new LoadedCheerio(undefined, rootInstance, options);\n            }\n            const elements = typeof selector === 'string' && isHtml(selector)\n                ? // $(<html>)\n                    parse(selector, options, false, null).children\n                : isNode(selector)\n                    ? // $(dom)\n                        [selector]\n                    : Array.isArray(selector)\n                        ? // $([dom])\n                            selector\n                        : undefined;\n            const instance = new LoadedCheerio(elements, rootInstance, options);\n            if (elements) {\n                return instance;\n            }\n            if (typeof selector !== 'string') {\n                throw new Error('Unexpected type of selector');\n            }\n            // We know that our selector is a string now.\n            let search = selector;\n            const searchContext = !context\n                ? // If we don't have a context, maybe we have a root, from loading\n                    rootInstance\n                : typeof context === 'string'\n                    ? isHtml(context)\n                        ? // $('li', '<ul>...</ul>')\n                            new LoadedCheerio([parse(context, options, false, null)], rootInstance, options)\n                        : // $('li', 'ul')\n                            ((search = `${context} ${search}`), rootInstance)\n                    : isCheerio(context)\n                        ? // $('li', $)\n                            context\n                        : // $('li', node), $('li', [nodes])\n                            new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options);\n            // If we still don't have a context, return\n            if (!searchContext)\n                return instance;\n            /*\n             * #id, .class, tag\n             */\n            return searchContext.find(search);\n        }\n        // Add in static methods & properties\n        Object.assign(initialize, staticMethods, {\n            load,\n            // `_root` and `_options` are used in static methods.\n            _root: initialRoot,\n            _options: internalOpts,\n            // Add `fn` for plugins\n            fn: LoadedCheerio.prototype,\n            // Add the prototype here to maintain `instanceof` behavior.\n            prototype: LoadedCheerio.prototype,\n        });\n        return initialize;\n    };\n}\nfunction isNode(obj) {\n    return (!!obj.name ||\n        obj.type === 'root' ||\n        obj.type === 'text' ||\n        obj.type === 'comment');\n}\n//# sourceMappingURL=load.js.map"]},"metadata":{},"sourceType":"module"}