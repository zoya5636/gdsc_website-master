{"ast":null,"code":"// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nconst whitespace = new Set([9, 10, 12, 13, 32]);\nconst ZERO = \"0\".charCodeAt(0);\nconst NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\n\nexport function parse(formula) {\n  formula = formula.trim().toLowerCase();\n\n  if (formula === \"even\") {\n    return [2, 0];\n  } else if (formula === \"odd\") {\n    return [2, 1];\n  } // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n\n\n  let idx = 0;\n  let a = 0;\n  let sign = readSign();\n  let number = readNumber();\n\n  if (idx < formula.length && formula.charAt(idx) === \"n\") {\n    idx++;\n    a = sign * (number !== null && number !== void 0 ? number : 1);\n    skipWhitespace();\n\n    if (idx < formula.length) {\n      sign = readSign();\n      skipWhitespace();\n      number = readNumber();\n    } else {\n      sign = number = 0;\n    }\n  } // Throw if there is anything else\n\n\n  if (number === null || idx < formula.length) {\n    throw new Error(`n-th rule couldn't be parsed ('${formula}')`);\n  }\n\n  return [a, sign * number];\n\n  function readSign() {\n    if (formula.charAt(idx) === \"-\") {\n      idx++;\n      return -1;\n    }\n\n    if (formula.charAt(idx) === \"+\") {\n      idx++;\n    }\n\n    return 1;\n  }\n\n  function readNumber() {\n    const start = idx;\n    let value = 0;\n\n    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n      value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n      idx++;\n    } // Return `null` if we didn't read anything.\n\n\n    return idx === start ? null : value;\n  }\n\n  function skipWhitespace() {\n    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n      idx++;\n    }\n  }\n}","map":{"version":3,"sources":["parse.ts"],"names":[],"mappings":"AAAA;AAEA;AACA,MAAM,UAAU,GAAG,IAAI,GAAJ,CAAQ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,CAAR,CAAnB;AACA,MAAM,IAAI,GAAG,IAAI,UAAJ,CAAe,CAAf,CAAb;AACA,MAAM,IAAI,GAAG,IAAI,UAAJ,CAAe,CAAf,CAAb;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,KAAV,CAAgB,OAAhB,EAA+B;AACjC,EAAA,OAAO,GAAG,OAAO,CAAC,IAAR,GAAe,WAAf,EAAV;;AAEA,MAAI,OAAO,KAAK,MAAhB,EAAwB;AACpB,WAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH,GAFD,MAEO,IAAI,OAAO,KAAK,KAAhB,EAAuB;AAC1B,WAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACH,GAPgC,CASjC;;;AAEA,MAAI,GAAG,GAAG,CAAV;AAEA,MAAI,CAAC,GAAG,CAAR;AACA,MAAI,IAAI,GAAG,QAAQ,EAAnB;AACA,MAAI,MAAM,GAAG,UAAU,EAAvB;;AAEA,MAAI,GAAG,GAAG,OAAO,CAAC,MAAd,IAAwB,OAAO,CAAC,MAAR,CAAe,GAAf,MAAwB,GAApD,EAAyD;AACrD,IAAA,GAAG;AACH,IAAA,CAAC,GAAG,IAAI,IAAI,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,CAAd,CAAR;AAEA,IAAA,cAAc;;AAEd,QAAI,GAAG,GAAG,OAAO,CAAC,MAAlB,EAA0B;AACtB,MAAA,IAAI,GAAG,QAAQ,EAAf;AACA,MAAA,cAAc;AACd,MAAA,MAAM,GAAG,UAAU,EAAnB;AACH,KAJD,MAIO;AACH,MAAA,IAAI,GAAG,MAAM,GAAG,CAAhB;AACH;AACJ,GA9BgC,CAgCjC;;;AACA,MAAI,MAAM,KAAK,IAAX,IAAmB,GAAG,GAAG,OAAO,CAAC,MAArC,EAA6C;AACzC,UAAM,IAAI,KAAJ,CAAU,kCAAkC,OAAO,IAAnD,CAAN;AACH;;AAED,SAAO,CAAC,CAAD,EAAI,IAAI,GAAG,MAAX,CAAP;;AAEA,WAAS,QAAT,GAAiB;AACb,QAAI,OAAO,CAAC,MAAR,CAAe,GAAf,MAAwB,GAA5B,EAAiC;AAC7B,MAAA,GAAG;AACH,aAAO,CAAC,CAAR;AACH;;AAED,QAAI,OAAO,CAAC,MAAR,CAAe,GAAf,MAAwB,GAA5B,EAAiC;AAC7B,MAAA,GAAG;AACN;;AAED,WAAO,CAAP;AACH;;AAED,WAAS,UAAT,GAAmB;AACf,UAAM,KAAK,GAAG,GAAd;AACA,QAAI,KAAK,GAAG,CAAZ;;AAEA,WACI,GAAG,GAAG,OAAO,CAAC,MAAd,IACA,OAAO,CAAC,UAAR,CAAmB,GAAnB,KAA2B,IAD3B,IAEA,OAAO,CAAC,UAAR,CAAmB,GAAnB,KAA2B,IAH/B,EAIE;AACE,MAAA,KAAK,GAAG,KAAK,GAAG,EAAR,IAAc,OAAO,CAAC,UAAR,CAAmB,GAAnB,IAA0B,IAAxC,CAAR;AACA,MAAA,GAAG;AACN,KAXc,CAaf;;;AACA,WAAO,GAAG,KAAK,KAAR,GAAgB,IAAhB,GAAuB,KAA9B;AACH;;AAED,WAAS,cAAT,GAAuB;AACnB,WACI,GAAG,GAAG,OAAO,CAAC,MAAd,IACA,UAAU,CAAC,GAAX,CAAe,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAAf,CAFJ,EAGE;AACE,MAAA,GAAG;AACN;AACJ;AACJ","sourceRoot":"https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/","sourcesContent":["// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nconst whitespace = new Set([9, 10, 12, 13, 32]);\nconst ZERO = \"0\".charCodeAt(0);\nconst NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\nexport function parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n        return [2, 0];\n    }\n    else if (formula === \"odd\") {\n        return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    let idx = 0;\n    let a = 0;\n    let sign = readSign();\n    let number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n        idx++;\n        a = sign * (number !== null && number !== void 0 ? number : 1);\n        skipWhitespace();\n        if (idx < formula.length) {\n            sign = readSign();\n            skipWhitespace();\n            number = readNumber();\n        }\n        else {\n            sign = number = 0;\n        }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n        throw new Error(`n-th rule couldn't be parsed ('${formula}')`);\n    }\n    return [a, sign * number];\n    function readSign() {\n        if (formula.charAt(idx) === \"-\") {\n            idx++;\n            return -1;\n        }\n        if (formula.charAt(idx) === \"+\") {\n            idx++;\n        }\n        return 1;\n    }\n    function readNumber() {\n        const start = idx;\n        let value = 0;\n        while (idx < formula.length &&\n            formula.charCodeAt(idx) >= ZERO &&\n            formula.charCodeAt(idx) <= NINE) {\n            value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n            idx++;\n        }\n        // Return `null` if we didn't read anything.\n        return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n        while (idx < formula.length &&\n            whitespace.has(formula.charCodeAt(idx))) {\n            idx++;\n        }\n    }\n}\n//# sourceMappingURL=parse.js.map"]},"metadata":{},"sourceType":"module"}