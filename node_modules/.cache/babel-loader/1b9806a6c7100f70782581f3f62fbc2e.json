{"ast":null,"code":"import boolbase from \"boolbase\";\n/**\n * All reserved characters in a regex, used for escaping.\n *\n * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license\n * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794\n */\n\nconst reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n\nfunction escapeRegex(value) {\n  return value.replace(reChars, \"\\\\$&\");\n}\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */\n\n\nconst caseInsensitiveAttributes = new Set([\"accept\", \"accept-charset\", \"align\", \"alink\", \"axis\", \"bgcolor\", \"charset\", \"checked\", \"clear\", \"codetype\", \"color\", \"compact\", \"declare\", \"defer\", \"dir\", \"direction\", \"disabled\", \"enctype\", \"face\", \"frame\", \"hreflang\", \"http-equiv\", \"lang\", \"language\", \"link\", \"media\", \"method\", \"multiple\", \"nohref\", \"noresize\", \"noshade\", \"nowrap\", \"readonly\", \"rel\", \"rev\", \"rules\", \"scope\", \"scrolling\", \"selected\", \"shape\", \"target\", \"text\", \"type\", \"valign\", \"valuetype\", \"vlink\"]);\n\nfunction shouldIgnoreCase(selector, options) {\n  return typeof selector.ignoreCase === \"boolean\" ? selector.ignoreCase : selector.ignoreCase === \"quirks\" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);\n}\n/**\n * Attribute selectors\n */\n\n\nexport const attributeRules = {\n  equals(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);\n      };\n    }\n\n    return elem => adapter.getAttributeValue(elem, name) === value && next(elem);\n  },\n\n  hyphen(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    const len = value.length;\n\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return function hyphenIC(elem) {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len).toLowerCase() === value && next(elem);\n      };\n    }\n\n    return function hyphen(elem) {\n      const attr = adapter.getAttributeValue(elem, name);\n      return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len) === value && next(elem);\n    };\n  },\n\n  element(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name,\n      value\n    } = data;\n\n    if (/\\s/.test(value)) {\n      return boolbase.falseFunc;\n    }\n\n    const regex = new RegExp(`(?:^|\\\\s)${escapeRegex(value)}(?:$|\\\\s)`, shouldIgnoreCase(data, options) ? \"i\" : \"\");\n    return function element(elem) {\n      const attr = adapter.getAttributeValue(elem, name);\n      return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);\n    };\n  },\n\n  exists(next, {\n    name\n  }, {\n    adapter\n  }) {\n    return elem => adapter.hasAttrib(elem, name) && next(elem);\n  },\n\n  start(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    const len = value.length;\n\n    if (len === 0) {\n      return boolbase.falseFunc;\n    }\n\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);\n      };\n    }\n\n    return elem => {\n      var _a;\n\n      return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) && next(elem);\n    };\n  },\n\n  end(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    const len = -value.length;\n\n    if (len === 0) {\n      return boolbase.falseFunc;\n    }\n\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        var _a;\n\n        return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);\n      };\n    }\n\n    return elem => {\n      var _a;\n\n      return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) && next(elem);\n    };\n  },\n\n  any(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name,\n      value\n    } = data;\n\n    if (value === \"\") {\n      return boolbase.falseFunc;\n    }\n\n    if (shouldIgnoreCase(data, options)) {\n      const regex = new RegExp(escapeRegex(value), \"i\");\n      return function anyIC(elem) {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);\n      };\n    }\n\n    return elem => {\n      var _a;\n\n      return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) && next(elem);\n    };\n  },\n\n  not(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n\n    if (value === \"\") {\n      return elem => !!adapter.getAttributeValue(elem, name) && next(elem);\n    } else if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        const attr = adapter.getAttributeValue(elem, name);\n        return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);\n      };\n    }\n\n    return elem => adapter.getAttributeValue(elem, name) !== value && next(elem);\n  }\n\n};","map":{"version":3,"sources":["attributes.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/css-select/0f0725a9dfeddd2fdb54eda9656cdbab5bbf6be6/src/","sourcesContent":["import boolbase from \"boolbase\";\n/**\n * All reserved characters in a regex, used for escaping.\n *\n * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license\n * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794\n */\nconst reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\nfunction escapeRegex(value) {\n    return value.replace(reChars, \"\\\\$&\");\n}\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */\nconst caseInsensitiveAttributes = new Set([\n    \"accept\",\n    \"accept-charset\",\n    \"align\",\n    \"alink\",\n    \"axis\",\n    \"bgcolor\",\n    \"charset\",\n    \"checked\",\n    \"clear\",\n    \"codetype\",\n    \"color\",\n    \"compact\",\n    \"declare\",\n    \"defer\",\n    \"dir\",\n    \"direction\",\n    \"disabled\",\n    \"enctype\",\n    \"face\",\n    \"frame\",\n    \"hreflang\",\n    \"http-equiv\",\n    \"lang\",\n    \"language\",\n    \"link\",\n    \"media\",\n    \"method\",\n    \"multiple\",\n    \"nohref\",\n    \"noresize\",\n    \"noshade\",\n    \"nowrap\",\n    \"readonly\",\n    \"rel\",\n    \"rev\",\n    \"rules\",\n    \"scope\",\n    \"scrolling\",\n    \"selected\",\n    \"shape\",\n    \"target\",\n    \"text\",\n    \"type\",\n    \"valign\",\n    \"valuetype\",\n    \"vlink\",\n]);\nfunction shouldIgnoreCase(selector, options) {\n    return typeof selector.ignoreCase === \"boolean\"\n        ? selector.ignoreCase\n        : selector.ignoreCase === \"quirks\"\n            ? !!options.quirksMode\n            : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);\n}\n/**\n * Attribute selectors\n */\nexport const attributeRules = {\n    equals(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.length === value.length &&\n                    attr.toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return (elem) => adapter.getAttributeValue(elem, name) === value && next(elem);\n    },\n    hyphen(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        const len = value.length;\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function hyphenIC(elem) {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    (attr.length === len || attr.charAt(len) === \"-\") &&\n                    attr.substr(0, len).toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return function hyphen(elem) {\n            const attr = adapter.getAttributeValue(elem, name);\n            return (attr != null &&\n                (attr.length === len || attr.charAt(len) === \"-\") &&\n                attr.substr(0, len) === value &&\n                next(elem));\n        };\n    },\n    element(next, data, options) {\n        const { adapter } = options;\n        const { name, value } = data;\n        if (/\\s/.test(value)) {\n            return boolbase.falseFunc;\n        }\n        const regex = new RegExp(`(?:^|\\\\s)${escapeRegex(value)}(?:$|\\\\s)`, shouldIgnoreCase(data, options) ? \"i\" : \"\");\n        return function element(elem) {\n            const attr = adapter.getAttributeValue(elem, name);\n            return (attr != null &&\n                attr.length >= value.length &&\n                regex.test(attr) &&\n                next(elem));\n        };\n    },\n    exists(next, { name }, { adapter }) {\n        return (elem) => adapter.hasAttrib(elem, name) && next(elem);\n    },\n    start(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        const len = value.length;\n        if (len === 0) {\n            return boolbase.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.length >= len &&\n                    attr.substr(0, len).toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return (elem) => {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) &&\n                next(elem);\n        };\n    },\n    end(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        const len = -value.length;\n        if (len === 0) {\n            return boolbase.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                var _a;\n                return ((_a = adapter\n                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);\n            };\n        }\n        return (elem) => {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) &&\n                next(elem);\n        };\n    },\n    any(next, data, options) {\n        const { adapter } = options;\n        const { name, value } = data;\n        if (value === \"\") {\n            return boolbase.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            const regex = new RegExp(escapeRegex(value), \"i\");\n            return function anyIC(elem) {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.length >= value.length &&\n                    regex.test(attr) &&\n                    next(elem));\n            };\n        }\n        return (elem) => {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) &&\n                next(elem);\n        };\n    },\n    not(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        if (value === \"\") {\n            return (elem) => !!adapter.getAttributeValue(elem, name) && next(elem);\n        }\n        else if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                const attr = adapter.getAttributeValue(elem, name);\n                return ((attr == null ||\n                    attr.length !== value.length ||\n                    attr.toLowerCase() !== value) &&\n                    next(elem));\n            };\n        }\n        return (elem) => adapter.getAttributeValue(elem, name) !== value && next(elem);\n    },\n};\n//# sourceMappingURL=attributes.js.map"]},"metadata":{},"sourceType":"module"}