{"ast":null,"code":"import { decodeXML, decodeHTML, decodeHTMLStrict } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\n/** The level of entities to support. */\n\nexport var EntityLevel;\n\n(function (EntityLevel) {\n  /** Support only XML entities. */\n  EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n  /** Support HTML entities, which are a superset of XML entities. */\n\n  EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\n/** Determines whether some entities are allowed to be written without a trailing `;`. */\n\n\nexport var DecodingMode;\n\n(function (DecodingMode) {\n  /** Support legacy HTML entities. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Do not support legacy HTML entities. */\n\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n})(DecodingMode || (DecodingMode = {}));\n\nexport var EncodingMode;\n\n(function (EncodingMode) {\n  /**\n   * The output is UTF-8 encoded. Only characters that need escaping within\n   * XML will be escaped.\n   */\n  EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n  /**\n   * The output consists only of ASCII characters. Characters that need\n   * escaping within HTML, and characters that aren't ASCII characters will\n   * be escaped.\n   */\n\n  EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n  /**\n   * Encode all characters that have an equivalent entity, as well as all\n   * characters that are not ASCII characters.\n   */\n\n  EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n  /**\n   * Encode all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n\n  EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n  /**\n   * Encode all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n\n  EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\n\n\nexport function decode(data, options = EntityLevel.XML) {\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === DecodingMode.Strict) {\n      return decodeHTMLStrict(data);\n    }\n\n    return decodeHTML(data);\n  }\n\n  return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\n\nexport function decodeStrict(data, options = EntityLevel.XML) {\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === DecodingMode.Legacy) {\n      return decodeHTML(data);\n    }\n\n    return decodeHTMLStrict(data);\n  }\n\n  return decodeXML(data);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\n\nexport function encode(data, options = EntityLevel.XML) {\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options; // Mode `UTF8` just escapes XML entities\n\n  if (opts.mode === EncodingMode.UTF8) return escapeUTF8(data);\n  if (opts.mode === EncodingMode.Attribute) return escapeAttribute(data);\n  if (opts.mode === EncodingMode.Text) return escapeText(data);\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === EncodingMode.ASCII) {\n      return encodeNonAsciiHTML(data);\n    }\n\n    return encodeHTML(data);\n  } // ASCII and Extensive are equivalent\n\n\n  return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML // Legacy aliases (deprecated)\n, encodeHTML as encodeHTML4, encodeHTML as encodeHTML5 } from \"./encode.js\";\nexport { decodeXML, decodeHTML, decodeHTMLStrict // Legacy aliases (deprecated)\n, decodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict } from \"./decode.js\";","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sourcesContent":["import { decodeXML, decodeHTML, decodeHTMLStrict } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\n/** The level of entities to support. */\nexport var EntityLevel;\n(function (EntityLevel) {\n    /** Support only XML entities. */\n    EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */\n    EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\n/** Determines whether some entities are allowed to be written without a trailing `;`. */\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Support legacy HTML entities. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Do not support legacy HTML entities. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n})(DecodingMode || (DecodingMode = {}));\nexport var EncodingMode;\n(function (EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */\n    EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */\n    EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */\n    EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nexport function decode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === DecodingMode.Strict) {\n            return decodeHTMLStrict(data);\n        }\n        return decodeHTML(data);\n    }\n    return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nexport function decodeStrict(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === DecodingMode.Legacy) {\n            return decodeHTML(data);\n        }\n        return decodeHTMLStrict(data);\n    }\n    return decodeXML(data);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nexport function encode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8)\n        return escapeUTF8(data);\n    if (opts.mode === EncodingMode.Attribute)\n        return escapeAttribute(data);\n    if (opts.mode === EncodingMode.Text)\n        return escapeText(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return encodeNonAsciiHTML(data);\n        }\n        return encodeHTML(data);\n    }\n    // ASCII and Extensive are equivalent\n    return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML, \n// Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5, } from \"./encode.js\";\nexport { decodeXML, decodeHTML, decodeHTMLStrict, \n// Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict, } from \"./decode.js\";\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}