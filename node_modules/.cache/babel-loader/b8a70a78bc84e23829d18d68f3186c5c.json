{"ast":null,"code":"/*\n * Module dependencies\n */\nimport * as ElementType from \"domelementtype\";\nimport { encodeXML, escapeAttribute, escapeText } from \"entities\";\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\n\nimport { elementNames, attributeNames } from \"./foreignNames.js\";\nconst unencodedElements = new Set([\"style\", \"script\", \"xmp\", \"iframe\", \"noembed\", \"noframes\", \"plaintext\", \"noscript\"]);\n\nfunction replaceQuotes(value) {\n  return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */\n\n\nfunction formatAttributes(attributes, opts) {\n  var _a;\n\n  if (!attributes) return;\n  const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== \"utf8\" ? encodeXML : escapeAttribute;\n  return Object.keys(attributes).map(key => {\n    var _a, _b;\n\n    const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n\n    if (opts.xmlMode === \"foreign\") {\n      /* Fix up mixed-case attribute names */\n      key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n    }\n\n    if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n      return key;\n    }\n\n    return `${key}=\"${encode(value)}\"`;\n  }).join(\" \");\n}\n/**\n * Self-enclosing tags\n */\n\n\nconst singleTag = new Set([\"area\", \"base\", \"basefont\", \"br\", \"col\", \"command\", \"embed\", \"frame\", \"hr\", \"img\", \"input\", \"isindex\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\n\nexport function render(node, options = {}) {\n  const nodes = \"length\" in node ? node : [node];\n  let output = \"\";\n\n  for (let i = 0; i < nodes.length; i++) {\n    output += renderNode(nodes[i], options);\n  }\n\n  return output;\n}\nexport default render;\n\nfunction renderNode(node, options) {\n  switch (node.type) {\n    case ElementType.Root:\n      return render(node.children, options);\n    // @ts-expect-error We don't use `Doctype` yet\n\n    case ElementType.Doctype:\n    case ElementType.Directive:\n      return renderDirective(node);\n\n    case ElementType.Comment:\n      return renderComment(node);\n\n    case ElementType.CDATA:\n      return renderCdata(node);\n\n    case ElementType.Script:\n    case ElementType.Style:\n    case ElementType.Tag:\n      return renderTag(node, options);\n\n    case ElementType.Text:\n      return renderText(node, options);\n  }\n}\n\nconst foreignModeIntegrationPoints = new Set([\"mi\", \"mo\", \"mn\", \"ms\", \"mtext\", \"annotation-xml\", \"foreignObject\", \"desc\", \"title\"]);\nconst foreignElements = new Set([\"svg\", \"math\"]);\n\nfunction renderTag(elem, opts) {\n  var _a; // Handle SVG / MathML in HTML\n\n\n  if (opts.xmlMode === \"foreign\") {\n    /* Fix up mixed-case element names */\n    elem.name = (_a = elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n    /* Exit foreign mode at integration points */\n\n    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {\n      opts = { ...opts,\n        xmlMode: false\n      };\n    }\n  }\n\n  if (!opts.xmlMode && foreignElements.has(elem.name)) {\n    opts = { ...opts,\n      xmlMode: \"foreign\"\n    };\n  }\n\n  let tag = `<${elem.name}`;\n  const attribs = formatAttributes(elem.attribs, opts);\n\n  if (attribs) {\n    tag += ` ${attribs}`;\n  }\n\n  if (elem.children.length === 0 && (opts.xmlMode ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n  opts.selfClosingTags !== false : // User explicitly asked for self-closing tags, even in HTML mode\n  opts.selfClosingTags && singleTag.has(elem.name))) {\n    if (!opts.xmlMode) tag += \" \";\n    tag += \"/>\";\n  } else {\n    tag += \">\";\n\n    if (elem.children.length > 0) {\n      tag += render(elem.children, opts);\n    }\n\n    if (opts.xmlMode || !singleTag.has(elem.name)) {\n      tag += `</${elem.name}>`;\n    }\n  }\n\n  return tag;\n}\n\nfunction renderDirective(elem) {\n  return `<${elem.data}>`;\n}\n\nfunction renderText(elem, opts) {\n  var _a;\n\n  let data = elem.data || \"\"; // If entities weren't decoded, no need to encode them back\n\n  if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {\n    data = opts.xmlMode || opts.encodeEntities !== \"utf8\" ? encodeXML(data) : escapeText(data);\n  }\n\n  return data;\n}\n\nfunction renderCdata(elem) {\n  return `<![CDATA[${elem.children[0].data}]]>`;\n}\n\nfunction renderComment(elem) {\n  return `<!--${elem.data}-->`;\n}","map":{"version":3,"sources":["C:/Users/zoya/Downloads/gdsc_website-master/gdsc_website-master/node_modules/cheerio-select/node_modules/dom-serializer/lib/esm/index.js"],"names":["ElementType","encodeXML","escapeAttribute","escapeText","elementNames","attributeNames","unencodedElements","Set","replaceQuotes","value","replace","formatAttributes","attributes","opts","_a","encode","encodeEntities","decodeEntities","xmlMode","Object","keys","map","key","_b","get","emptyAttrs","join","singleTag","render","node","options","nodes","output","i","length","renderNode","type","Root","children","Doctype","Directive","renderDirective","Comment","renderComment","CDATA","renderCdata","Script","Style","Tag","renderTag","Text","renderText","foreignModeIntegrationPoints","foreignElements","elem","name","parent","has","tag","attribs","selfClosingTags","data"],"mappings":"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","sourcesContent":["/*\n * Module dependencies\n */\nimport * as ElementType from \"domelementtype\";\nimport { encodeXML, escapeAttribute, escapeText } from \"entities\";\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nimport { elementNames, attributeNames } from \"./foreignNames.js\";\nconst unencodedElements = new Set([\n    \"style\",\n    \"script\",\n    \"xmp\",\n    \"iframe\",\n    \"noembed\",\n    \"noframes\",\n    \"plaintext\",\n    \"noscript\",\n]);\nfunction replaceQuotes(value) {\n    return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n    var _a;\n    if (!attributes)\n        return;\n    const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false\n        ? replaceQuotes\n        : opts.xmlMode || opts.encodeEntities !== \"utf8\"\n            ? encodeXML\n            : escapeAttribute;\n    return Object.keys(attributes)\n        .map((key) => {\n        var _a, _b;\n        const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n        if (opts.xmlMode === \"foreign\") {\n            /* Fix up mixed-case attribute names */\n            key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n        }\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n            return key;\n        }\n        return `${key}=\"${encode(value)}\"`;\n    })\n        .join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nconst singleTag = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nexport function render(node, options = {}) {\n    const nodes = \"length\" in node ? node : [node];\n    let output = \"\";\n    for (let i = 0; i < nodes.length; i++) {\n        output += renderNode(nodes[i], options);\n    }\n    return output;\n}\nexport default render;\nfunction renderNode(node, options) {\n    switch (node.type) {\n        case ElementType.Root:\n            return render(node.children, options);\n        // @ts-expect-error We don't use `Doctype` yet\n        case ElementType.Doctype:\n        case ElementType.Directive:\n            return renderDirective(node);\n        case ElementType.Comment:\n            return renderComment(node);\n        case ElementType.CDATA:\n            return renderCdata(node);\n        case ElementType.Script:\n        case ElementType.Style:\n        case ElementType.Tag:\n            return renderTag(node, options);\n        case ElementType.Text:\n            return renderText(node, options);\n    }\n}\nconst foreignModeIntegrationPoints = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\",\n]);\nconst foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n    var _a;\n    // Handle SVG / MathML in HTML\n    if (opts.xmlMode === \"foreign\") {\n        /* Fix up mixed-case element names */\n        elem.name = (_a = elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n        /* Exit foreign mode at integration points */\n        if (elem.parent &&\n            foreignModeIntegrationPoints.has(elem.parent.name)) {\n            opts = { ...opts, xmlMode: false };\n        }\n    }\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\n        opts = { ...opts, xmlMode: \"foreign\" };\n    }\n    let tag = `<${elem.name}`;\n    const attribs = formatAttributes(elem.attribs, opts);\n    if (attribs) {\n        tag += ` ${attribs}`;\n    }\n    if (elem.children.length === 0 &&\n        (opts.xmlMode\n            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n                opts.selfClosingTags !== false\n            : // User explicitly asked for self-closing tags, even in HTML mode\n                opts.selfClosingTags && singleTag.has(elem.name))) {\n        if (!opts.xmlMode)\n            tag += \" \";\n        tag += \"/>\";\n    }\n    else {\n        tag += \">\";\n        if (elem.children.length > 0) {\n            tag += render(elem.children, opts);\n        }\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\n            tag += `</${elem.name}>`;\n        }\n    }\n    return tag;\n}\nfunction renderDirective(elem) {\n    return `<${elem.data}>`;\n}\nfunction renderText(elem, opts) {\n    var _a;\n    let data = elem.data || \"\";\n    // If entities weren't decoded, no need to encode them back\n    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false &&\n        !(!opts.xmlMode &&\n            elem.parent &&\n            unencodedElements.has(elem.parent.name))) {\n        data =\n            opts.xmlMode || opts.encodeEntities !== \"utf8\"\n                ? encodeXML(data)\n                : escapeText(data);\n    }\n    return data;\n}\nfunction renderCdata(elem) {\n    return `<![CDATA[${elem.children[0].data}]]>`;\n}\nfunction renderComment(elem) {\n    return `<!--${elem.data}-->`;\n}\n"]},"metadata":{},"sourceType":"module"}