{"ast":null,"code":"import { cloneNode, Document } from 'domhandler';\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\n\nexport { isTag } from 'domhandler';\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\n\nexport function isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\n\nexport function camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, (_, x) => x.toUpperCase());\n}\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\n\nexport function cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\n\nexport function domEach(array, fn) {\n  const len = array.length;\n\n  for (let i = 0; i < len; i++) fn(array[i], i);\n\n  return array;\n}\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\n\nexport function cloneDom(dom) {\n  const clone = 'length' in dom ? Array.prototype.map.call(dom, el => cloneNode(el, true)) : [cloneNode(dom, true)]; // Add a root node around the cloned nodes\n\n  const root = new Document(clone);\n  clone.forEach(node => {\n    node.parent = root;\n  });\n  return clone;\n}\nvar CharacterCodes;\n\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\n\n\nexport function isHtml(str) {\n  const tagStart = str.indexOf('<');\n  if (tagStart < 0 || tagStart > str.length - 3) return false;\n  const tagChar = str.charCodeAt(tagStart + 1);\n  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes('>', tagStart + 2);\n}","map":{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { cloneNode, Document } from 'domhandler';\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\nexport { isTag } from 'domhandler';\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nexport function isCheerio(maybeCheerio) {\n    return maybeCheerio.cheerio != null;\n}\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\nexport function camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, (_, x) => x.toUpperCase());\n}\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\nexport function cssCase(str) {\n    return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nexport function domEach(array, fn) {\n    const len = array.length;\n    for (let i = 0; i < len; i++)\n        fn(array[i], i);\n    return array;\n}\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nexport function cloneDom(dom) {\n    const clone = 'length' in dom\n        ? Array.prototype.map.call(dom, (el) => cloneNode(el, true))\n        : [cloneNode(dom, true)];\n    // Add a root node around the cloned nodes\n    const root = new Document(clone);\n    clone.forEach((node) => {\n        node.parent = root;\n    });\n    return clone;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\nexport function isHtml(str) {\n    const tagStart = str.indexOf('<');\n    if (tagStart < 0 || tagStart > str.length - 3)\n        return false;\n    const tagChar = str.charCodeAt(tagStart + 1);\n    return (((tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ) ||\n        (tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ) ||\n        tagChar === CharacterCodes.Exclamation) &&\n        str.includes('>', tagStart + 2));\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}