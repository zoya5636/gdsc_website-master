{"ast":null,"code":"import { domEach, isTag } from '../utils.js';\n/**\n * Set multiple CSS properties for every matched element.\n *\n * @category CSS\n * @param prop - The names of the properties.\n * @param val - The new values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/css/}\n */\n\nexport function css(prop, val) {\n  if (prop != null && val != null || // When `prop` is a \"plain\" object\n  typeof prop === 'object' && !Array.isArray(prop)) {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        // `prop` can't be an array here anymore.\n        setCss(el, prop, val, i);\n      }\n    });\n  }\n\n  if (this.length === 0) {\n    return undefined;\n  }\n\n  return getCss(this[0], prop);\n}\n/**\n * Set styles of all elements.\n *\n * @private\n * @param el - Element to set style of.\n * @param prop - Name of property.\n * @param value - Value to set property to.\n * @param idx - Optional index within the selection.\n */\n\nfunction setCss(el, prop, value, idx) {\n  if (typeof prop === 'string') {\n    const styles = getCss(el);\n    const val = typeof value === 'function' ? value.call(el, idx, styles[prop]) : value;\n\n    if (val === '') {\n      delete styles[prop];\n    } else if (val != null) {\n      styles[prop] = val;\n    }\n\n    el.attribs['style'] = stringify(styles);\n  } else if (typeof prop === 'object') {\n    Object.keys(prop).forEach((k, i) => {\n      setCss(el, k, prop[k], i);\n    });\n  }\n}\n\nfunction getCss(el, prop) {\n  if (!el || !isTag(el)) return;\n  const styles = parse(el.attribs['style']);\n\n  if (typeof prop === 'string') {\n    return styles[prop];\n  }\n\n  if (Array.isArray(prop)) {\n    const newStyles = {};\n    prop.forEach(item => {\n      if (styles[item] != null) {\n        newStyles[item] = styles[item];\n      }\n    });\n    return newStyles;\n  }\n\n  return styles;\n}\n/**\n * Stringify `obj` to styles.\n *\n * @private\n * @category CSS\n * @param obj - Object to stringify.\n * @returns The serialized styles.\n */\n\n\nfunction stringify(obj) {\n  return Object.keys(obj).reduce((str, prop) => `${str}${str ? ' ' : ''}${prop}: ${obj[prop]};`, '');\n}\n/**\n * Parse `styles`.\n *\n * @private\n * @category CSS\n * @param styles - Styles to be parsed.\n * @returns The parsed styles.\n */\n\n\nfunction parse(styles) {\n  styles = (styles || '').trim();\n  if (!styles) return {};\n  const obj = {};\n  let key;\n\n  for (const str of styles.split(';')) {\n    const n = str.indexOf(':'); // If there is no :, or if it is the first/last character, add to the previous item's value\n\n    if (n < 1 || n === str.length - 1) {\n      const trimmed = str.trimEnd();\n\n      if (trimmed.length > 0 && key !== undefined) {\n        obj[key] += `;${trimmed}`;\n      }\n    } else {\n      key = str.slice(0, n).trim();\n      obj[key] = str.slice(n + 1).trim();\n    }\n  }\n\n  return obj;\n}","map":{"version":3,"sources":["api/css.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { domEach, isTag } from '../utils.js';\n/**\n * Set multiple CSS properties for every matched element.\n *\n * @category CSS\n * @param prop - The names of the properties.\n * @param val - The new values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/css/}\n */\nexport function css(prop, val) {\n    if ((prop != null && val != null) ||\n        // When `prop` is a \"plain\" object\n        (typeof prop === 'object' && !Array.isArray(prop))) {\n        return domEach(this, (el, i) => {\n            if (isTag(el)) {\n                // `prop` can't be an array here anymore.\n                setCss(el, prop, val, i);\n            }\n        });\n    }\n    if (this.length === 0) {\n        return undefined;\n    }\n    return getCss(this[0], prop);\n}\n/**\n * Set styles of all elements.\n *\n * @private\n * @param el - Element to set style of.\n * @param prop - Name of property.\n * @param value - Value to set property to.\n * @param idx - Optional index within the selection.\n */\nfunction setCss(el, prop, value, idx) {\n    if (typeof prop === 'string') {\n        const styles = getCss(el);\n        const val = typeof value === 'function' ? value.call(el, idx, styles[prop]) : value;\n        if (val === '') {\n            delete styles[prop];\n        }\n        else if (val != null) {\n            styles[prop] = val;\n        }\n        el.attribs['style'] = stringify(styles);\n    }\n    else if (typeof prop === 'object') {\n        Object.keys(prop).forEach((k, i) => {\n            setCss(el, k, prop[k], i);\n        });\n    }\n}\nfunction getCss(el, prop) {\n    if (!el || !isTag(el))\n        return;\n    const styles = parse(el.attribs['style']);\n    if (typeof prop === 'string') {\n        return styles[prop];\n    }\n    if (Array.isArray(prop)) {\n        const newStyles = {};\n        prop.forEach((item) => {\n            if (styles[item] != null) {\n                newStyles[item] = styles[item];\n            }\n        });\n        return newStyles;\n    }\n    return styles;\n}\n/**\n * Stringify `obj` to styles.\n *\n * @private\n * @category CSS\n * @param obj - Object to stringify.\n * @returns The serialized styles.\n */\nfunction stringify(obj) {\n    return Object.keys(obj).reduce((str, prop) => `${str}${str ? ' ' : ''}${prop}: ${obj[prop]};`, '');\n}\n/**\n * Parse `styles`.\n *\n * @private\n * @category CSS\n * @param styles - Styles to be parsed.\n * @returns The parsed styles.\n */\nfunction parse(styles) {\n    styles = (styles || '').trim();\n    if (!styles)\n        return {};\n    const obj = {};\n    let key;\n    for (const str of styles.split(';')) {\n        const n = str.indexOf(':');\n        // If there is no :, or if it is the first/last character, add to the previous item's value\n        if (n < 1 || n === str.length - 1) {\n            const trimmed = str.trimEnd();\n            if (trimmed.length > 0 && key !== undefined) {\n                obj[key] += `;${trimmed}`;\n            }\n        }\n        else {\n            key = str.slice(0, n).trim();\n            obj[key] = str.slice(n + 1).trim();\n        }\n    }\n    return obj;\n}\n//# sourceMappingURL=css.js.map"]},"metadata":{},"sourceType":"module"}