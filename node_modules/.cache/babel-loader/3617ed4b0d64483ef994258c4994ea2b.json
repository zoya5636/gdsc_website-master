{"ast":null,"code":"import { textContent } from 'domutils';\nimport { default as defaultOptions, flatten as flattenOptions } from './options.js';\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\n\nfunction render(that, dom, options) {\n  if (!that) return '';\n  return that(dom !== null && dom !== void 0 ? dom : that._root.children, null, undefined, options).toString();\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\n\n\nfunction isOptions(dom, options) {\n  return !options && typeof dom === 'object' && dom != null && !('length' in dom) && !('type' in dom);\n}\n\nexport function html(dom, options) {\n  /*\n   * Be flexible about parameters, sometimes we call html(),\n   * with options as only parameter\n   * check dom argument for dom element specific properties\n   * assume there is no 'length' or 'type' properties in the options object\n   */\n  const toRender = isOptions(dom) ? (options = dom, undefined) : dom;\n  /*\n   * Sometimes `$.html()` is used without preloading html,\n   * so fallback non-existing options to the default ones.\n   */\n\n  const opts = { ...defaultOptions,\n    ...(this === null || this === void 0 ? void 0 : this._options),\n    ...flattenOptions(options !== null && options !== void 0 ? options : {})\n  };\n  return render(this, toRender, opts);\n}\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\n\nexport function xml(dom) {\n  const options = { ...this._options,\n    xmlMode: true\n  };\n  return render(this, dom, options);\n}\n/**\n * Render the document as text.\n *\n * This returns the `textContent` of the passed elements. The result will\n * include the contents of `script` and `stype` elements. To avoid this, use\n * `.prop('innerText')` instead.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\n\nexport function text(elements) {\n  const elems = elements ? elements : this ? this.root() : [];\n  let ret = '';\n\n  for (let i = 0; i < elems.length; i++) {\n    ret += textContent(elems[i]);\n  }\n\n  return ret;\n}\nexport function parseHTML(data, context, keepScripts = typeof context === 'boolean' ? context : false) {\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  const parsed = this.load(data, defaultOptions, false);\n\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n  /*\n   * The `children` array is used by Cheerio internally to group elements that\n   * share the same parents. When nodes created through `parseHTML` are\n   * inserted into previously-existing DOM structures, they will be removed\n   * from the `children` array. The results of `parseHTML` should remain\n   * constant across these operations, so a shallow copy should be returned.\n   */\n\n\n  return parsed.root()[0].children.slice();\n}\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\n\nexport function root() {\n  return this(this._root);\n}\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\n\nexport function contains(container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n  /*\n   * Step up the descendants, stopping when the root element is reached\n   * (signaled by `.parent` returning a reference to the same object)\n   */\n\n\n  let next = contained;\n\n  while (next && next !== next.parent) {\n    next = next.parent;\n\n    if (next === container) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\n\nexport function merge(arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n\n  let newLength = arr1.length;\n  const len = +arr2.length;\n\n  for (let i = 0; i < len; i++) {\n    arr1[newLength++] = arr2[i];\n  }\n\n  arr1.length = newLength;\n  return arr1;\n}\n/**\n * Checks if an object is array-like.\n *\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\n\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (typeof item !== 'object' || !Object.prototype.hasOwnProperty.call(item, 'length') || typeof item.length !== 'number' || item.length < 0) {\n    return false;\n  }\n\n  for (let i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["static.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { textContent } from 'domutils';\nimport { default as defaultOptions, flatten as flattenOptions, } from './options.js';\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\nfunction render(that, dom, options) {\n    if (!that)\n        return '';\n    return that(dom !== null && dom !== void 0 ? dom : that._root.children, null, undefined, options).toString();\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\nfunction isOptions(dom, options) {\n    return (!options &&\n        typeof dom === 'object' &&\n        dom != null &&\n        !('length' in dom) &&\n        !('type' in dom));\n}\nexport function html(dom, options) {\n    /*\n     * Be flexible about parameters, sometimes we call html(),\n     * with options as only parameter\n     * check dom argument for dom element specific properties\n     * assume there is no 'length' or 'type' properties in the options object\n     */\n    const toRender = isOptions(dom) ? ((options = dom), undefined) : dom;\n    /*\n     * Sometimes `$.html()` is used without preloading html,\n     * so fallback non-existing options to the default ones.\n     */\n    const opts = {\n        ...defaultOptions,\n        ...this === null || this === void 0 ? void 0 : this._options,\n        ...flattenOptions(options !== null && options !== void 0 ? options : {}),\n    };\n    return render(this, toRender, opts);\n}\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\nexport function xml(dom) {\n    const options = { ...this._options, xmlMode: true };\n    return render(this, dom, options);\n}\n/**\n * Render the document as text.\n *\n * This returns the `textContent` of the passed elements. The result will\n * include the contents of `script` and `stype` elements. To avoid this, use\n * `.prop('innerText')` instead.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\nexport function text(elements) {\n    const elems = elements ? elements : this ? this.root() : [];\n    let ret = '';\n    for (let i = 0; i < elems.length; i++) {\n        ret += textContent(elems[i]);\n    }\n    return ret;\n}\nexport function parseHTML(data, context, keepScripts = typeof context === 'boolean' ? context : false) {\n    if (!data || typeof data !== 'string') {\n        return null;\n    }\n    if (typeof context === 'boolean') {\n        keepScripts = context;\n    }\n    const parsed = this.load(data, defaultOptions, false);\n    if (!keepScripts) {\n        parsed('script').remove();\n    }\n    /*\n     * The `children` array is used by Cheerio internally to group elements that\n     * share the same parents. When nodes created through `parseHTML` are\n     * inserted into previously-existing DOM structures, they will be removed\n     * from the `children` array. The results of `parseHTML` should remain\n     * constant across these operations, so a shallow copy should be returned.\n     */\n    return parsed.root()[0].children.slice();\n}\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\nexport function root() {\n    return this(this._root);\n}\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\nexport function contains(container, contained) {\n    // According to the jQuery API, an element does not \"contain\" itself\n    if (contained === container) {\n        return false;\n    }\n    /*\n     * Step up the descendants, stopping when the root element is reached\n     * (signaled by `.parent` returning a reference to the same object)\n     */\n    let next = contained;\n    while (next && next !== next.parent) {\n        next = next.parent;\n        if (next === container) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\nexport function merge(arr1, arr2) {\n    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n        return;\n    }\n    let newLength = arr1.length;\n    const len = +arr2.length;\n    for (let i = 0; i < len; i++) {\n        arr1[newLength++] = arr2[i];\n    }\n    arr1.length = newLength;\n    return arr1;\n}\n/**\n * Checks if an object is array-like.\n *\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\nfunction isArrayLike(item) {\n    if (Array.isArray(item)) {\n        return true;\n    }\n    if (typeof item !== 'object' ||\n        !Object.prototype.hasOwnProperty.call(item, 'length') ||\n        typeof item.length !== 'number' ||\n        item.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < item.length; i++) {\n        if (!(i in item)) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=static.js.map"]},"metadata":{},"sourceType":"module"}