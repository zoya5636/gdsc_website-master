{"ast":null,"code":"import { isTag, isCDATA, isText, hasChildren, isComment } from \"domhandler\";\nimport renderHTML from \"dom-serializer\";\nimport { ElementType } from \"domelementtype\";\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @returns `node`'s outer HTML.\n */\n\nexport function getOuterHTML(node, options) {\n  return renderHTML(node, options);\n}\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @returns `node`'s inner HTML.\n */\n\nexport function getInnerHTML(node, options) {\n  return hasChildren(node) ? node.children.map(node => getOuterHTML(node, options)).join(\"\") : \"\";\n}\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.\n *\n * @category Stringify\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */\n\nexport function getText(node) {\n  if (Array.isArray(node)) return node.map(getText).join(\"\");\n  if (isTag(node)) return node.name === \"br\" ? \"\\n\" : getText(node.children);\n  if (isCDATA(node)) return getText(node.children);\n  if (isText(node)) return node.data;\n  return \"\";\n}\n/**\n * Get a node's text content.\n *\n * @category Stringify\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */\n\nexport function textContent(node) {\n  if (Array.isArray(node)) return node.map(textContent).join(\"\");\n\n  if (hasChildren(node) && !isComment(node)) {\n    return textContent(node.children);\n  }\n\n  if (isText(node)) return node.data;\n  return \"\";\n}\n/**\n * Get a node's inner text.\n *\n * @category Stringify\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */\n\nexport function innerText(node) {\n  if (Array.isArray(node)) return node.map(innerText).join(\"\");\n\n  if (hasChildren(node) && (node.type === ElementType.Tag || isCDATA(node))) {\n    return innerText(node.children);\n  }\n\n  if (isText(node)) return node.data;\n  return \"\";\n}","map":{"version":3,"sources":["stringify.ts"],"names":[],"mappings":"AAAA,SACI,KADJ,EAEI,OAFJ,EAGI,MAHJ,EAII,WAJJ,EAMI,SANJ,QAOO,YAPP;AAQA,OAAO,UAAP,MAAiD,gBAAjD;AACA,SAAS,WAAT,QAA4B,gBAA5B;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,YAAV,CACF,IADE,EAEF,OAFE,EAE4B;AAE9B,SAAO,UAAU,CAAC,IAAD,EAAO,OAAP,CAAjB;AACH;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,YAAV,CACF,IADE,EAEF,OAFE,EAE4B;AAE9B,SAAO,WAAW,CAAC,IAAD,CAAX,GACD,IAAI,CAAC,QAAL,CAAc,GAAd,CAAmB,IAAD,IAAU,YAAY,CAAC,IAAD,EAAO,OAAP,CAAxC,EAAyD,IAAzD,CAA8D,EAA9D,CADC,GAED,EAFN;AAGH;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA2C;AAC7C,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB,OAAO,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,IAAlB,CAAuB,EAAvB,CAAP;AACzB,MAAI,KAAK,CAAC,IAAD,CAAT,EAAiB,OAAO,IAAI,CAAC,IAAL,KAAc,IAAd,GAAqB,IAArB,GAA4B,OAAO,CAAC,IAAI,CAAC,QAAN,CAA1C;AACjB,MAAI,OAAO,CAAC,IAAD,CAAX,EAAmB,OAAO,OAAO,CAAC,IAAI,CAAC,QAAN,CAAd;AACnB,MAAI,MAAM,CAAC,IAAD,CAAV,EAAkB,OAAO,IAAI,CAAC,IAAZ;AAClB,SAAO,EAAP;AACH;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAA+C;AACjD,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB,OAAO,IAAI,CAAC,GAAL,CAAS,WAAT,EAAsB,IAAtB,CAA2B,EAA3B,CAAP;;AACzB,MAAI,WAAW,CAAC,IAAD,CAAX,IAAqB,CAAC,SAAS,CAAC,IAAD,CAAnC,EAA2C;AACvC,WAAO,WAAW,CAAC,IAAI,CAAC,QAAN,CAAlB;AACH;;AACD,MAAI,MAAM,CAAC,IAAD,CAAV,EAAkB,OAAO,IAAI,CAAC,IAAZ;AAClB,SAAO,EAAP;AACH;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,SAAV,CAAoB,IAApB,EAA6C;AAC/C,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB,OAAO,IAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,IAApB,CAAyB,EAAzB,CAAP;;AACzB,MAAI,WAAW,CAAC,IAAD,CAAX,KAAsB,IAAI,CAAC,IAAL,KAAc,WAAW,CAAC,GAA1B,IAAiC,OAAO,CAAC,IAAD,CAA9D,CAAJ,EAA2E;AACvE,WAAO,SAAS,CAAC,IAAI,CAAC,QAAN,CAAhB;AACH;;AACD,MAAI,MAAM,CAAC,IAAD,CAAV,EAAkB,OAAO,IAAI,CAAC,IAAZ;AAClB,SAAO,EAAP;AACH","sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/f7e357b5c210b6731c2a60e0b7b3cfaa1f96b706/src/","sourcesContent":["import { isTag, isCDATA, isText, hasChildren, isComment, } from \"domhandler\";\nimport renderHTML from \"dom-serializer\";\nimport { ElementType } from \"domelementtype\";\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @returns `node`'s outer HTML.\n */\nexport function getOuterHTML(node, options) {\n    return renderHTML(node, options);\n}\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @returns `node`'s inner HTML.\n */\nexport function getInnerHTML(node, options) {\n    return hasChildren(node)\n        ? node.children.map((node) => getOuterHTML(node, options)).join(\"\")\n        : \"\";\n}\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.\n *\n * @category Stringify\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */\nexport function getText(node) {\n    if (Array.isArray(node))\n        return node.map(getText).join(\"\");\n    if (isTag(node))\n        return node.name === \"br\" ? \"\\n\" : getText(node.children);\n    if (isCDATA(node))\n        return getText(node.children);\n    if (isText(node))\n        return node.data;\n    return \"\";\n}\n/**\n * Get a node's text content.\n *\n * @category Stringify\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */\nexport function textContent(node) {\n    if (Array.isArray(node))\n        return node.map(textContent).join(\"\");\n    if (hasChildren(node) && !isComment(node)) {\n        return textContent(node.children);\n    }\n    if (isText(node))\n        return node.data;\n    return \"\";\n}\n/**\n * Get a node's inner text.\n *\n * @category Stringify\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */\nexport function innerText(node) {\n    if (Array.isArray(node))\n        return node.map(innerText).join(\"\");\n    if (hasChildren(node) && (node.type === ElementType.Tag || isCDATA(node))) {\n        return innerText(node.children);\n    }\n    if (isText(node))\n        return node.data;\n    return \"\";\n}\n//# sourceMappingURL=stringify.js.map"]},"metadata":{},"sourceType":"module"}